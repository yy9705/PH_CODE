###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             13/May/2019  11:10:18 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Components\mt\MT_UART.c #
#    Command line       =  -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95. #
#                          ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾ #
#                          ¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func         #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO      #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Components\mt\MT_UART.c" -D NWK_AUTO_POLL -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\List\" -lA        #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95. #
#                          ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾ #
#                          ¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\" -I                       #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\Source\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I  #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\hal #
#                          \include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\ #
#                          2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬ #
#                          Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\hal\target\CC2530EB\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\ #
#                          2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬ #
#                          Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\high_level\" -I                     #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf04\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ· #
#                          \2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷( #
#                          AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\ #
#                          95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø #
#                          ±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\201 #
#                          9.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ #
#                          ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\osal\include\" -I                          #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\ser #
#                          vices\saddr\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ #
#                          ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍD #
#                          OÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\services\sdata\" -I                  #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\sta #
#                          ck\af\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\201 #
#                          9.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ #
#                          ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\nwk\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sapi\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\sta #
#                          ck\sec\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\20 #
#                          19.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê± #
#                          ¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\stack\sys\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²ú #
#                          Æ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ #
#                          ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1 #
#                          a\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\zdo\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\zma #
#                          c\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ #
#                          \95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ #
#                          ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\zmac\f8w\" -Ohz                                #
#    List file          =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\List\MT_UART.lst   #
#    Object file        =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\Obj\MT_UART.r51    #
#                                                                             #
#                                                                             #
###############################################################################

E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          #include "MT_AF.h"
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/
     99          extern void SampleApp_CallBack(uint8 port, uint8 event);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          void MT_UartInit ()
   \                     MT_UartInit:
    101          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    102            halUARTCfg_t uartConfig;
    103          
    104            /* Initialize APP ID */
    105            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    106          
    107            /* UART Configuration */
    108            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    109            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    110            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    111            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7440         MOV     A,#0x40
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    112            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV     A,#0xa
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7480         MOV     A,#-0x80
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
    113            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV     A,#0x12
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7480         MOV     A,#-0x80
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    114            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7406         MOV     A,#0x6
   \   00004B   F0           MOVX    @DPTR,A
    115            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV     A,#0x16
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    116          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    117            uartConfig.callBackFunc         = SampleApp_CallBack;
   \   000054   741B         MOV     A,#0x1b
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   74..         MOV     A,#??SampleApp_CallBack?relay & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   74..         MOV     A,#(??SampleApp_CallBack?relay >> 8) & 0xff
   \   00005F   F0           MOVX    @DPTR,A
    118          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    119            uartConfig.callBackFunc         = SampleApp_CallBack;
    120          #else
    121            uartConfig.callBackFunc         = NULL;
    122          #endif
    123          
    124            /* Start UART */
    125          #if defined (MT_UART_DEFAULT_PORT)
    126            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000060                ; Setup parameters for call to function HalUARTOpen
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7900         MOV     R1,#0x0
   \   00006C   12....       LCALL   ??HalUARTOpen?relay
    127          #else
    128            /* Silence IAR compiler warning */
    129            (void)uartConfig;
    130          #endif
    131          
    132            /* Initialize for ZApp */
    133          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    134            /* Default max bytes that ZAPP can take */
    135            MT_UartMaxZAppBufLen  = 1;
    136            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    137          #endif
    138          
    139          }
   \   00006F   741D         MOV     A,#0x1d
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074                REQUIRE ?Subroutine0
   \   000074                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    140          
    141          /***************************************************************************************************
    142           * @fn      MT_SerialRegisterTaskID
    143           *
    144           * @brief   This function registers the taskID of the application so it knows
    145           *          where to send the messages whent they come in.
    146           *
    147           * @param   void
    148           *
    149           * @return  void
    150           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    152          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    153            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    154          }
   \   000009   80..         SJMP    ?Subroutine0
    155          
    156          /***************************************************************************************************
    157           * @fn      SPIMgr_CalcFCS
    158           *
    159           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    160           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    161           *
    162           * @param   byte *msg_ptr - message pointer
    163           * @param   byte len - length (in bytes) of message
    164           *
    165           * @return  result byte
    166           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    168          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    169            byte x;
    170            byte xorResult;
    171          
    172            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    173          
    174            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    175              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    176          
    177            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    178          }
    179          
    180          
    181          /***************************************************************************************************
    182           * @fn      MT_UartProcessZToolData
    183           *
    184           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    185           *          |  1  |     1        |    2    |  0-Len   |   1   |
    186           *
    187           *          Parses the data and determine either is SPI or just simply serial data
    188           *          then send the data to correct place (MT or APP)
    189           *
    190           * @param   port     - UART port
    191           *          event    - Event that causes the callback
    192           *
    193           *
    194           * @return  None
    195           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    197          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    198            uint8  ch;
    199            uint8  bytesInRxBuffer;
    200            
    201            (void)event;  // Intentionally unreferenced parameter
   \   00000C   803B         SJMP    ??MT_UartProcessZToolData_0
    202          
    203            while (Hal_UART_RxBufLen(port))
    204            {
    205              HalUARTRead (port, &ch, 1);
    206          
    207              switch (state)
    208              {
    209                case SOP_STATE:
    210                  if (ch == MT_UART_SOF)
    211                    state = LEN_STATE;
    212                  break;
    213          
    214                case LEN_STATE:
    215                  LEN_Token = ch;
    216          
    217                  tempDataLen = 0;
    218          
    219                  /* Allocate memory for the data */
    220                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    221                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    222          
    223                  if (pMsg)
    224                  {
    225                    /* Fill up what we can */
    226                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_1:
   \   00000E   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    227                    pMsg->msg = (uint8*)(pMsg+1);
   \   000014   90....       MOV     DPTR,#pMsg
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2402         ADD     A,#0x2
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   90....       MOV     DPTR,#pMsg
   \   000023   E0           MOVX    A,@DPTR
   \   000024   2404         ADD     A,#0x4
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FB           MOV     R3,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   EA           MOV     A,R2
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   EB           MOV     A,R3
   \   000034   12....       LCALL   ?Subroutine3 & 0xFFFF
    228                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \                     ??CrossCallReturnLabel_4:
   \   000037   C0E0         PUSH    A
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
    229                    state = CMD_STATE1;
   \   000043   90....       MOV     DPTR,#state
   \   000046   7401         MOV     A,#0x1
   \                     ??MT_UartProcessZToolData_2:
   \   000048   F0           MOVX    @DPTR,A
    230                  }
    231                  else
    232                  {
    233                    state = SOP_STATE;
    234                    return;
    235                  }
    236                  break;
   \                     ??MT_UartProcessZToolData_0:
   \   000049                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000049   EE           MOV     A,R6
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   EA           MOV     A,R2
   \   000051   45..         ORL     A,?V0 + 1
   \   000053   607A         JZ      ??MT_UartProcessZToolData_3
   \   000055                ; Setup parameters for call to function HalUARTRead
   \   000055   7C01         MOV     R4,#0x1
   \   000057   7D00         MOV     R5,#0x0
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   \   000063   EE           MOV     A,R6
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??HalUARTRead?relay
   \   000068   90....       MOV     DPTR,#state
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6017         JZ      ??MT_UartProcessZToolData_4
   \   00006E   14           DEC     A
   \   00006F   6068         JZ      ??MT_UartProcessZToolData_5
   \   000071   14           DEC     A
   \   000072   607C         JZ      ??MT_UartProcessZToolData_6
   \   000074   14           DEC     A
   \   000075   6020         JZ      ??MT_UartProcessZToolData_7
   \   000077   14           DEC     A
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??MT_UartProcessZToolData_8 & 0xFFFF
   \   00007D   14           DEC     A
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??MT_UartProcessZToolData_9 & 0xFFFF
   \   000083   80C4         SJMP    ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_4:
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   64FE         XRL     A,#0xfe
   \   00008E   70B9         JNZ     ??MT_UartProcessZToolData_0
   \   000090   90....       MOV     DPTR,#state
   \   000093   7403         MOV     A,#0x3
   \   000095   80B1         SJMP    ??MT_UartProcessZToolData_2
   \                     ??MT_UartProcessZToolData_7:
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   90....       MOV     DPTR,#LEN_Token
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   90....       MOV     DPTR,#tempDataLen
   \   0000A5   E4           CLR     A
   \   0000A6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000A9   2407         ADD     A,#0x7
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   3400         ADDC    A,#0x0
   \   0000AF   FB           MOV     R3,A
   \   0000B0   12....       LCALL   ??osal_msg_allocate?relay
   \   0000B3   90....       MOV     DPTR,#pMsg
   \   0000B6   EA           MOV     A,R2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   EB           MOV     A,R3
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   90....       MOV     DPTR,#pMsg
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F8           MOV     R0,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   E8           MOV     A,R0
   \   0000C4   49           ORL     A,R1
   \   0000C5   6003         JZ      $+5
   \   0000C7   02....       LJMP    ??MT_UartProcessZToolData_1 & 0xFFFF
   \   0000CA   90....       MOV     DPTR,#state
   \   0000CD   E4           CLR     A
   \   0000CE   F0           MOVX    @DPTR,A
   \                     ??MT_UartProcessZToolData_3:
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D4   7F02         MOV     R7,#0x2
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238                case CMD_STATE1:
    239                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5:
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   C0E0         PUSH    A
   \   0000E2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E5   D0E0         POP     A
   \   0000E7   F0           MOVX    @DPTR,A
    240                  state = CMD_STATE2;
   \   0000E8   90....       MOV     DPTR,#state
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    241                  break;
    242          
    243                case CMD_STATE2:
    244                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_6:
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   C0E0         PUSH    A
   \   0000F9   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000FC   A3           INC     DPTR
   \   0000FD   D0E0         POP     A
   \   0000FF   12....       LCALL   ?Subroutine3 & 0xFFFF
    245                  /* If there is no data, skip to FCS state */
    246                  if (LEN_Token)
   \                     ??CrossCallReturnLabel_6:
   \   000102   7003         JNZ     $+5
   \   000104   02....       LJMP    ??MT_UartProcessZToolData_10 & 0xFFFF
    247                  {
    248                    state = DATA_STATE;
   \   000107   90....       MOV     DPTR,#state
   \   00010A   7404         MOV     A,#0x4
   \   00010C   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    249                  }
    250                  else
    251                  {
    252                    state = FCS_STATE;
    253                  }
    254                  break;
    255          
    256                case DATA_STATE:
    257          
    258                  /* Fill in the buffer the first byte of the data */
    259                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_8:
   \   00010F   85..82       MOV     DPL,?XSP + 0
   \   000112   85..83       MOV     DPH,?XSP + 1
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   90....       MOV     DPTR,#tempDataLen
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F8           MOV     R0,A
   \   00011D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000120   D0E0         POP     A
   \   000122   F0           MOVX    @DPTR,A
   \   000123   90....       MOV     DPTR,#tempDataLen
   \   000126   E0           MOVX    A,@DPTR
   \   000127   04           INC     A
   \   000128   F0           MOVX    @DPTR,A
    260          
    261                  /* Check number of bytes left in the Rx buffer */
    262                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   000129                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000129   EE           MOV     A,R6
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00012E   EA           MOV     A,R2
   \   00012F   FF           MOV     R7,A
    263          
    264                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    265                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   000130   90....       MOV     DPTR,#LEN_Token
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   90....       MOV     DPTR,#tempDataLen
   \   000138   E0           MOVX    A,@DPTR
   \   000139   FA           MOV     R2,A
   \   00013A   E8           MOV     A,R0
   \   00013B   C3           CLR     C
   \   00013C   9A           SUBB    A,R2
   \   00013D   F8           MOV     R0,A
   \   00013E   95E0         SUBB    A,0xE0 /* A   */
   \   000140   F9           MOV     R1,A
   \   000141   8F..         MOV     ?V0 + 0,R7
   \   000143   C3           CLR     C
   \   000144   E8           MOV     A,R0
   \   000145   95..         SUBB    A,?V0 + 0
   \   000147   E9           MOV     A,R1
   \   000148   9400         SUBB    A,#0x0
   \   00014A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00014C   65D0         XRL     A,PSW
   \   00014E   33           RLC     A
   \   00014F   4013         JC      ??MT_UartProcessZToolData_11
    266                  {
    267                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   000151                ; Setup parameters for call to function HalUARTRead
   \   000151   AC..         MOV     R4,?V0 + 0
   \   000153   7D00         MOV     R5,#0x0
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F8           MOV     R0,A
   \   000157   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00015A   12....       LCALL   ??HalUARTRead?relay
    268                    tempDataLen += bytesInRxBuffer;
   \   00015D   90....       MOV     DPTR,#tempDataLen
   \   000160   E0           MOVX    A,@DPTR
   \   000161   2F           ADD     A,R7
   \   000162   8019         SJMP    ??MT_UartProcessZToolData_12
    269                  }
    270                  else
    271                  {
    272                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_11:
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F8           MOV     R0,A
   \   000166                ; Setup parameters for call to function HalUARTRead
   \   000166   90....       MOV     DPTR,#LEN_Token
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   C3           CLR     C
   \   00016B   98           SUBB    A,R0
   \   00016C   FC           MOV     R4,A
   \   00016D   95E0         SUBB    A,0xE0 /* A   */
   \   00016F   FD           MOV     R5,A
   \   000170   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000173   12....       LCALL   ??HalUARTRead?relay
    273                    tempDataLen += (LEN_Token - tempDataLen);
   \   000176   90....       MOV     DPTR,#LEN_Token
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   90....       MOV     DPTR,#tempDataLen
   \                     ??MT_UartProcessZToolData_12:
   \   00017D   F0           MOVX    @DPTR,A
    274                  }
    275          
    276                  /* If number of bytes read is equal to data length, time to move on to FCS */
    277                  if ( tempDataLen == LEN_Token )
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F8           MOV     R0,A
   \   000180   90....       MOV     DPTR,#LEN_Token
   \   000183   E0           MOVX    A,@DPTR
   \   000184   68           XRL     A,R0
   \   000185   6003         JZ      $+5
   \   000187   02....       LJMP    ??MT_UartProcessZToolData_0 & 0xFFFF
    278                      state = FCS_STATE;
   \                     ??MT_UartProcessZToolData_10:
   \   00018A   90....       MOV     DPTR,#state
   \   00018D   7405         MOV     A,#0x5
   \   00018F   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    279          
    280                  break;
    281          
    282                case FCS_STATE:
    283          
    284                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_9:
   \   000192   85..82       MOV     DPL,?XSP + 0
   \   000195   85..83       MOV     DPH,?XSP + 1
   \   000198   E0           MOVX    A,@DPTR
   \   000199   90....       MOV     DPTR,#FSC_Token
   \   00019C   12....       LCALL   ?Subroutine3 & 0xFFFF
    285          
    286                  /* Make sure it's correct */
    287                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \                     ??CrossCallReturnLabel_7:
   \   00019F   2403         ADD     A,#0x3
   \   0001A1   F9           MOV     R1,A
   \   0001A2   90....       MOV     DPTR,#pMsg
   \   0001A5   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   FA           MOV     R2,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   FB           MOV     R3,A
   \   0001AF   12....       LCALL   ??MT_UartCalcFCS?relay
   \   0001B2   E9           MOV     A,R1
   \   0001B3   F8           MOV     R0,A
   \   0001B4   90....       MOV     DPTR,#FSC_Token
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   68           XRL     A,R0
   \   0001B9   90....       MOV     DPTR,#pMsg
   \   0001BC   700F         JNZ     ??MT_UartProcessZToolData_13
    288                  {
    289                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   0001BE                ; Setup parameters for call to function osal_msg_send
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   FA           MOV     R2,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   FB           MOV     R3,A
   \   0001C3   90....       MOV     DPTR,#App_TaskID
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F9           MOV     R1,A
   \   0001C8   12....       LCALL   ??osal_msg_send?relay
   \   0001CB   8008         SJMP    ??MT_UartProcessZToolData_14
    290                  }
    291                  else
    292                  {
    293                    /* deallocate the msg */
    294                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_13:
   \   0001CD                ; Setup parameters for call to function osal_msg_deallocate
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   FA           MOV     R2,A
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   FB           MOV     R3,A
   \   0001D2   12....       LCALL   ??osal_msg_deallocate?relay
    295                  }
    296          
    297                  /* Reset the state, send or discard the buffers at this point */
    298                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_14:
   \   0001D5   90....       MOV     DPTR,#state
   \   0001D8   E4           CLR     A
   \   0001D9   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    299          
    300                  break;
    301          
    302                default:
    303                 break;
    304              }
    305            }
    306          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_allocate
   \   000001                ; Setup parameters for call to function MT_UartCalcFCS
   \   000001   90....       MOV     DPTR,#LEN_Token
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   28           ADD     A,R0
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   3400         ADDC    A,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   F583         MOV     DPH,A
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    307          
    308          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    309          /***************************************************************************************************
    310           * @fn      MT_UartProcessZAppData
    311           *
    312           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    313           *          |  1  |  2   |       1         |  1   |
    314           *
    315           *          Parses the data and determine either is SPI or just simply serial data
    316           *          then send the data to correct place (MT or APP)
    317           *
    318           * @param   port    - UART port
    319           *          event   - Event that causes the callback
    320           *
    321           *
    322           * @return  None
    323           ***************************************************************************************************/
    324          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    325          {
    326          
    327            osal_event_hdr_t  *msg_ptr;
    328            uint16 length = 0;
    329            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    330          
    331            /*
    332               If maxZAppBufferLength is 0 or larger than current length
    333               the entire length of the current buffer is returned.
    334            */
    335            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    336            {
    337              length = MT_UartMaxZAppBufLen;
    338            }
    339            else
    340            {
    341              length = rxBufLen;
    342            }
    343          
    344            /* Verify events */
    345            if (event == HAL_UART_TX_FULL)
    346            {
    347              // Do something when TX if full
    348              return;
    349            }
    350          
    351            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    352            {
    353              if ( App_TaskID )
    354              {
    355                /*
    356                   If Application is ready to receive and there is something
    357                   in the Rx buffer then send it up
    358                */
    359                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    360                {
    361                  /* Disable App flow control until it processes the current data */
    362                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    363          
    364                  /* 2 more bytes are added, 1 for CMD type, other for length */
    365                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    366                  if ( msg_ptr )
    367                  {
    368                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    369                    msg_ptr->status = length;
    370          
    371                    /* Read the data of Rx buffer */
    372                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    373          
    374                    /* Send the raw data to application...or where ever */
    375                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    376                  }
    377                }
    378              }
    379            }
    380          }
    381          
    382          /***************************************************************************************************
    383           * @fn      SPIMgr_ZAppBufferLengthRegister
    384           *
    385           * @brief
    386           *
    387           * @param   maxLen - Max Length that the application wants at a time
    388           *
    389           * @return  None
    390           *
    391           ***************************************************************************************************/
    392          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    393          {
    394            /* If the maxLen is larger than the RX buff, something is not right */
    395            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    396              MT_UartMaxZAppBufLen = maxLen;
    397            else
    398              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    399          }
    400          
    401          /***************************************************************************************************
    402           * @fn      SPIMgr_AppFlowControl
    403           *
    404           * @brief
    405           *
    406           * @param   status - ready to send or not
    407           *
    408           * @return  None
    409           *
    410           ***************************************************************************************************/
    411          void MT_UartAppFlowControl ( bool status )
    412          {
    413          
    414            /* Make sure only update if needed */
    415            if (status != MT_UartZAppRxStatus )
    416            {
    417              MT_UartZAppRxStatus = status;
    418            }
    419          
    420            /* App is ready to read again, ProcessZAppData have to be triggered too */
    421            if (status == MT_UART_ZAPP_RX_READY)
    422            {
    423              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    424            }
    425          
    426          }
    427          
    428          #endif //ZAPP
    429          
    430          /***************************************************************************************************
    431          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     11  MT_UartCalcFCS
       2      0     29  MT_UartInit
                          2 0 29 -> HalUARTOpen
       1      0     11  MT_UartProcessZToolData
                          0 0 11 -> HalUARTRead
                          0 0 11 -> Hal_UART_RxBufLen
                          0 0 11 -> MT_UartCalcFCS
                          0 0 11 -> osal_msg_allocate
                          0 0 11 -> osal_msg_deallocate
                          0 0 11 -> osal_msg_send
       2      0      0  MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_UartCalcFCS?relay
       6  ??MT_UartInit?relay
       6  ??MT_UartProcessZToolData?relay
       6  ??MT_UartRegisterTaskID?relay
       6  ??Subroutine7_0
       7  ?Subroutine0
      10  ?Subroutine1
      13  ?Subroutine2
       6  ?Subroutine3
       4  ?Subroutine4
      28  ?Subroutine5
       3  ?Subroutine6
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      33  MT_UartCalcFCS
     116  MT_UartInit
     476  MT_UartProcessZToolData
      11  MT_UartRegisterTaskID
       2  pMsg
       1  state
       1  tempDataLen

 
 713 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 737 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
