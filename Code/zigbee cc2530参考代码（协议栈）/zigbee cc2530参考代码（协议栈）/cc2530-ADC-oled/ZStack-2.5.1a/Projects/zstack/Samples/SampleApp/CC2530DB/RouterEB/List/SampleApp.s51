///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        18/May/2018  16:33:24 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pro /
//                          jects\zstack\Samples\SampleApp\Source\SampleApp.c /
//    Command line       =  -f "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×° /
//                          \5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï° /
//                          Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô /
//                          ´«¸ĞÆ÷\ZStack-2.5.1a\Projects\zstack\Samples\Samp /
//                          leApp\Source\SampleApp.c" -D ZTOOL_P1 -D          /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\RouterEB /
//                          \List\" -lA "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZSta /
//                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\RouterEB\List\" --diag_suppress Pe001,Pa010   /
//                          -o "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×° /
//                          \5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\Route /
//                          rEB\Obj\" -e --no_code_motion --debug             /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\Sourc /
//                          e\" -I "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³ /
//                          °²×°\5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2. /
//                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\ZMain\TI2530DB\" -I                       /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\include\" -I                /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\target\CC2530EB\" -I        /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\include\" -I                /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\high_level\" -I             /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\" -I        /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\single_chip /
//                          \" -I "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³° /
//                          ²×°\5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mt\" -I                   /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\osal\include\" -I               /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\saddr\" -I             /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\sdata\" -I             /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\af\" -I                   /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\nwk\" -I                  /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sapi\" -I                 /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sec\" -I                  /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sys\" -I                  /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\" -I                  /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\" -I                       /
//                          "M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5× /
//                          éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\f8w\" -Ohz                 /
//    List file          =  M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB\ /
//                          List\SampleApp.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GetLight?relay
        FUNCTION ??GetLight?relay,0203H
        PUBLIC ??SampleApp_CallBack?relay
        FUNCTION ??SampleApp_CallBack?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        FUNCTION ??SampleApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBLIC GetLight
        FUNCTION GetLight,021201H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC SampleApp_CallBack
        FUNCTION SampleApp_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION SampleApp_ProcessMSGCmd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 74, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_42c80000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
sprintf             SYMBOL "sprintf"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_strlen         SYMBOL "osal_strlen"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTRead         SYMBOL "HalUARTRead"
HalAdcRead          SYMBOL "HalAdcRead"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??sprintf?relay     SYMBOL "?relay", sprintf
GetLight            SYMBOL "GetLight"
??GetLight?relay    SYMBOL "?relay", GetLight
SampleApp_CallBack  SYMBOL "SampleApp_CallBack"
??SampleApp_CallBack?relay SYMBOL "?relay", SampleApp_CallBack
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H

// M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àı³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé(2.5Ğ­ÒéÕ»)\10.¹âÃô´«¸ĞÆ÷\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 
//    5 #include <stdio.h>
//    6 #include <string.h>
//    7 #include "AF.h"
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    9 #include "OSAL_Tasks.h"
//   10 #include "SampleApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18   #include "hal_lcd.h"
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 #include "hal_adc.h"
//   23 
//   24 
//   25 /*********************************************************************
//   26  * MACROS
//   27  */
//   28 
//   29 /*********************************************************************
//   30  * CONSTANTS
//   31  */
//   32 
//   33 #if !defined( SAMPLE_APP_PORT )
//   34 #define SAMPLE_APP_PORT  0
//   35 #endif
//   36 
//   37 #if !defined( SAMPLE_APP_BAUD )
//   38   #define SAMPLE_APP_BAUD  HAL_UART_BR_115200
//   39 #endif
//   40 
//   41 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   42 #if !defined( SAMPLE_APP_THRESH )
//   43 #define SAMPLE_APP_THRESH  64
//   44 #endif
//   45 
//   46 #if !defined( SAMPLE_APP_RX_SZ )
//   47 #define SAMPLE_APP_RX_SZ  128
//   48 #endif
//   49 
//   50 #if !defined( SAMPLE_APP_TX_SZ )
//   51 #define SAMPLE_APP_TX_SZ  128
//   52 #endif
//   53 
//   54 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   55 #if !defined( SAMPLE_APP_IDLE )
//   56 #define SAMPLE_APP_IDLE  6
//   57 #endif
//   58 
//   59 // Loopback Rx bytes to Tx for throughput testing.
//   60 #if !defined( SAMPLE_APP_LOOPBACK )
//   61 #define SAMPLE_APP_LOOPBACK  FALSE
//   62 #endif
//   63 
//   64 // This is the max byte count per OTA message.
//   65 #if !defined( SAMPLE_APP_TX_MAX )
//   66 #define SAMPLE_APP_TX_MAX  80
//   67 #endif
//   68 
//   69 #define SAMPLE_APP_RSP_CNT  4
//   70 
//   71 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   72 const cId_t SampleApp_ClusterList[SAMPLE_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   73 {
//   74   SAMPLEAPP_P2P_CLUSTERID,
//   75   SAMPLEAPP_PERIODIC_CLUSTERID,
//   76 };
//   77 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   78 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   79 {
//   80   SAMPLEAPP_ENDPOINT,              //  int   Endpoint;
//   81   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   82   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   83   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   84   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   85   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   86   (cId_t *)SampleApp_ClusterList,  //  byte *pAppInClusterList;
//   87   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//   88   (cId_t *)SampleApp_ClusterList   //  byte *pAppOutClusterList;
//   89 };
//   90 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   91 endPointDesc_t SampleApp_epDesc =
SampleApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for SampleApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//   92 {
//   93   SAMPLEAPP_ENDPOINT,
//   94  &SampleApp_TaskID,
//   95   (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
//   96   noLatencyReqs
//   97 };
//   98 
//   99 /*********************************************************************
//  100  * TYPEDEFS
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * GLOBAL VARIABLES
//  105  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 devStates_t SampleApp_NwkState;   
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  107 uint8 SampleApp_TaskID;           // Task ID for internal task/event processing.
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 /*********************************************************************
//  110  * EXTERNAL VARIABLES
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * EXTERNAL FUNCTIONS
//  115  */
//  116 
//  117 /*********************************************************************
//  118  * LOCAL VARIABLES
//  119  */
//  120 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  121 static uint8 SampleApp_MsgID;
SampleApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  122 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  124 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  126 
//  127 
//  128 static afAddrType_t SampleApp_TxAddr;
//  129 static uint8 SampleApp_TxSeq;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];
SampleApp_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 static uint8 SampleApp_TxLen;
SampleApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  132 
//  133 static afAddrType_t SampleApp_RxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 static uint8 SampleApp_RxSeq;
SampleApp_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
//  136 
//  137 /*********************************************************************
//  138  * LOCAL FUNCTIONS
//  139  */
//  140 
//  141 static void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  142 void SampleApp_CallBack(uint8 port, uint8 event); 
//  143 static void SampleApp_Send_P2P_Message( void );
//  144 
//  145 
//  146 /*********************************************************************
//  147  * @fn      SampleApp_Init
//  148  *
//  149  * @brief   This is called during OSAL tasks' initialization.
//  150  *
//  151  * @param   task_id - the Task ID assigned by OSAL.
//  152  *
//  153  * @return  none
//  154  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  155 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  156 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  157   halUARTCfg_t uartConfig;
//  158 
//  159   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  160   SampleApp_RxSeq = 0xC3;
        MOV     DPTR,#SampleApp_RxSeq
        MOV     A,#-0x3d
        MOVX    @DPTR,A
//  161   SampleApp_NwkState = DEV_INIT;       
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  162 
//  163   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  164   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     ?V0 + 0,R6
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??MT_UartRegisterTaskID?relay
//  165   afRegister( (endPointDesc_t *)&SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  166   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  167 
//  168 #ifdef ZDO_COORDINATOR
//  169   //Ğ­µ÷Æ÷³õÊ¼»¯
//  170   
//  171   //·ê·äÃùÆ÷³õÊ¼»¯
//  172 
//  173   P0SEL &= ~0x80;                 //ÉèÖÃP07ÎªÆÕÍ¨IO¿Ú
//  174   P0DIR |= 0x80;                 //P07¶¨ÒåÎªÊä³ö¿Ú
//  175 
//  176   //Ä¬ÈÏ·äÃùÆ÷²»Ïì
//  177   P0_7=1;  
//  178 
//  179 #else
//  180   //ÖÕ¶Ë³õÊ¼»¯
//  181 
//  182   //P15ÊÇ¹âÃô´«¸ĞÆ÷µÄDOÒı½Å
//  183 
//  184   P1SEL &= ~0x20;                 //ÉèÖÃP1.5ÎªÆÕÍ¨IO¿Ú
        ANL     0xf4,#0xdf
//  185   P1DIR &= ~0x20;                 //P1.5¶¨ÒåÎªÊäÈë¿Ú
        ANL     0xfe,#0xdf
//  186 #endif
//  187 
//  188 
//  189   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  190   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  191   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  192 
//  193   // Setup for the flash command's destination address - Group 1
//  194   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  195   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  196   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  197   
//  198   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  199   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  200   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øĞ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  201 
//  202   
//  203 }
        SJMP    ??Subroutine2_0
        CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine2_0
        ; // Fall through to label ??Subroutine2_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine2_0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  204 
//  205 /*********************************************************************
//  206  * @fn      SampleApp_ProcessEvent
//  207  *
//  208  * @brief   Generic Application Task event processor.
//  209  *
//  210  * @param   task_id  - The OSAL assigned task ID.
//  211  * @param   events   - Bit map of events to process.
//  212  *
//  213  * @return  Event flags of all unprocessed events.
//  214  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  215 UINT16 SampleApp_ProcessEvent( uint8 task_id, UINT16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  216 {
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  217   (void)task_id;  // Intentionally unreferenced parameter
//  218   
//  219   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SampleApp_ProcessEvent_0
//  220   {
//  221     afIncomingMSGPacket_t *MSGpkt;
//  222 
//  223     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID )) )
//  224     {
//  225       switch ( MSGpkt->hdr.event )
//  226       {
//  227       case AF_INCOMING_MSG_CMD:
//  228         SampleApp_ProcessMSGCmd( MSGpkt );
//  229         break;
//  230         
//  231       case ZDO_STATE_CHANGE:
//  232         SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  233         if ( //(SampleApp_NwkState == DEV_ZB_COORD)||
//  234             (SampleApp_NwkState == DEV_ROUTER)
//  235             || (SampleApp_NwkState == DEV_END_DEVICE) )
//  236         {
//  237             
//  238             osal_start_timerEx( SampleApp_TaskID,
//  239                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  240                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
//  241         }
//  242         else
//  243         {
//  244           // Device is no longer in the network
//  245         }
//  246         break;
//  247 
//  248       default:
//  249         break;
//  250       }
//  251 
//  252       osal_msg_deallocate( (uint8 *)MSGpkt );
//  253     }
//  254 
//  255     return ( events ^ SYS_EVENT_MSG );
//  256   }
//  257 
//  258   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_1
//  259   {
//  260     // ²É¼¯º¯Êı
//  261     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  262 
//  263     //ÔÙ´ÎÆô¶¯¶¨Ê±Æ÷
//  264     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  265         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  266 
//  267     // return unprocessed events
//  268     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
??SampleApp_ProcessEvent_2:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_3
//  269   }
??SampleApp_ProcessEvent_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SampleApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_8
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_4
        SJMP    ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_8:
        ; Setup parameters for call to function SampleApp_ProcessMSGCmd
        LCALL   ??SampleApp_ProcessMSGCmd?relay
        SJMP    ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??SampleApp_ProcessEvent_2
//  270 
//  271 
//  272   return ( 0 );  // Discard unknown events.
??SampleApp_ProcessEvent_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  273 }
//  274 
//  275 /*********************************************************************
//  276  * @fn      SerialApp_ProcessMSGCmd
//  277  *
//  278  * @brief   Data message processor callback. This function processes
//  279  *          any incoming data - probably from other devices. Based
//  280  *          on the cluster ID, perform the intended action.
//  281  *
//  282  * @param   pkt - pointer to the incoming message packet
//  283  *
//  284  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  285  *          FALSE otherwise.
//  286  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SampleApp_ProcessMSGCmd:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_ProcessMSGCmd
        CODE
//  288 {
        FUNCALL SampleApp_ProcessMSGCmd, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  289   uint8 buff[20]={0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  290 
//  291   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessMSGCmd_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_ProcessMSGCmd_0:
        JNZ     ??SampleApp_ProcessMSGCmd_1
//  292   {
//  293   case SAMPLEAPP_P2P_CLUSTERID: 
//  294     {
//  295       // ½ÓÊÕÖÕ¶ËÉÏ´«µÄÊı¾İ
//  296 
//  297       //Ğ­µ÷Æ÷´¦Àí
//  298       uint8 DO=pkt->cmd.Data[0];//0¹âÏßÈõ£¬1¹âÏßÇ¿
//  299       uint8 AO=pkt->cmd.Data[1];//ÊÇ0~100µÄÊı
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  300 
//  301       sprintf(buff, "DO:%d,AO:%d", DO, AO);
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#`?<Constant "DO:%d,AO:%d">` & 0xff
        MOV     R5,#(`?<Constant "DO:%d,AO:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  302 
//  303       //lcd ÏÔÊ¾
//  304       HalLcdWriteString( buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  305 
//  306       //´®¿ÚÊä³ö
//  307       HalUARTWrite(0, buff, osal_strlen(buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine1 & 0xFFFF
//  308       HalUARTWrite(0, "\r\n", 2);
//  309 
//  310       //¹âÏßĞ¡ÓÚ20±¨¾¯
//  311       //·äÃùÆ÷±¨¾¯´¦Àí
//  312       if(AO<20)
??CrossCallReturnLabel_0:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x14
        JNC     ??SampleApp_ProcessMSGCmd_2
//  313       {
//  314         P0_7=0;
        CLR     0x80.7
        SJMP    ??SampleApp_ProcessMSGCmd_1
//  315       }
//  316       else
//  317       {
//  318         P0_7=1;        
??SampleApp_ProcessMSGCmd_2:
        SETB    0x80.7
//  319       }
//  320 
//  321     }
//  322     break;
//  323 
//  324   case SAMPLEAPP_PERIODIC_CLUSTERID:
//  325 
//  326     break;
//  327 
//  328     default:
//  329       break;
//  330   }
//  331 }
??SampleApp_ProcessMSGCmd_1:
        MOV     A,#0x14
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE _A_P0
//  332 
//  333 
//  334 /*********************************************************************
//  335  * @fn      SampleApp_CallBack
//  336  *
//  337  * @brief   Send data OTA.
//  338  *
//  339  * @param   port - UART port.
//  340  * @param   event - the UART port event flag.
//  341  *
//  342  * @return  none
//  343  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  344 void SampleApp_CallBack(uint8 port, uint8 event)
SampleApp_CallBack:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SampleApp_CallBack
        CODE
//  345 {
        FUNCALL SampleApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  346   (void)port;
//  347 
//  348   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  349 #if SAMPLE_APP_LOOPBACK
//  350       (SampleApp_TxLen < SAMPLE_APP_TX_MAX))
//  351 #else
//  352       !SampleApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SampleApp_CallBack_0
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SampleApp_CallBack_0
//  353 #endif
//  354   {
//  355     SampleApp_TxLen += HalUARTRead(SAMPLE_APP_PORT, SampleApp_TxBuf+SampleApp_TxLen+1,
//  356                                                       SAMPLE_APP_TX_MAX-SampleApp_TxLen);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_TxBuf + 1) & 0xff
        MOV     R3,#((SampleApp_TxBuf + 1) >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
//  357   }
//  358 }
??SampleApp_CallBack_0:
        LJMP    ??Subroutine2_0 & 0xFFFF
        CFI EndBlock cfiBlock5
//  359 
//  360 //È¡¹âÕÕÖµ,½ÓÔÚP06ÉÏ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  361 uint8 GetLight()
GetLight:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function GetLight
        CODE
//  362 {
        FUNCALL GetLight, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  363     uint8 temp=0;//°Ù·Ö±ÈµÄÕûÊıÖµ
//  364     float vol=0.0; //adc²ÉÑùµçÑ¹  
//  365     uint16 adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14); //ADC ²ÉÑùÖµ P06¿Ú
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x6
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  366 
//  367     //×î´ó²ÉÑùÖµ8192(ÒòÎª×î¸ßÎ»ÊÇ·ûºÅÎ»)
//  368     if(adc>=8192)
        CLR     C
        MOV     A,R1
        SUBB    A,#0x20
        JC      ??GetLight_0
//  369     {
//  370         return 0;
        MOV     R1,#0x0
        SJMP    ??GetLight_1
//  371     }
//  372     
//  373     adc=8192-adc;//·´ÏàÒ»ÏÂ£¬ÒòÎªµÍÊª¶ÈÊ±AO¿ÚÊä³ö½Ï¸ßµçÆ½
//  374                    //          ¸ßÊª¶ÈÊ±AO¿ÚÊä³ö½ÏµÍµçÆ½   
//  375 
//  376     //×ª»¯Îª°Ù·Ö±È
//  377     vol=(float)((float)adc)/8192.0;
//  378        
//  379     //È¡°Ù·Ö±ÈÁ½Î»Êı×Ö
//  380     temp=vol*100;
//  381 
//  382     return temp;
??GetLight_0:
        CLR     A
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,#0x20
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R1,?V0 + 0
??GetLight_1:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  383 }
//  384 /*********************************************************************
//  385  * @fn      SampleApp_Send_P2P_Message
//  386  *
//  387  * @brief   point to point.
//  388  *
//  389  * @param   none
//  390  *
//  391  * @return  none
//  392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  393 void SampleApp_Send_P2P_Message( void )
SampleApp_Send_P2P_Message:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function SampleApp_Send_P2P_Message
        CODE
//  394 {
        FUNCALL SampleApp_Send_P2P_Message, GetLight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 55
        MOV     A,#-0x37
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  395   uint8 buff[5]={0};
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  396   byte len=0;
//  397   
//  398   //µ±¹âÃôµç×è´¦ÓÚºÚ°µÖĞÊ±P1.5¸ßµçÆ½,¹âÏßÇ¿µÄÊ±ºòµÍµçÆ½
//  399   //buff[0]Ö»ÓĞ0ºÍ1£¬0¹âÏßÈõ£¬1¹âÏßÇ¿
//  400   buff[0]=P1_5>0?0:1;
        MOV     C,0x90.5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JC      ??SampleApp_Send_P2P_Message_0
        INC     A
??SampleApp_Send_P2P_Message_0:
        MOVX    @DPTR,A
//  401 
//  402   //È¡³öAO¿ÚÊı¾İ£¬È»ºó×ª³É°Ù·Ö±È£¬Êı¾İÔ½¸ß£¬¹âÕÕÔ½´ó
//  403   //buff[1]ÊÇ0~100µÄÊı
//  404   buff[1]=GetLight();//
        ; Setup parameters for call to function GetLight
        LCALL   ??GetLight?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  405 
//  406   
//  407   {
//  408     uint8 temp[50]={0};
        MOV     DPTR,#`?<Constant {0}>_2`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x32
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  409 
//  410     sprintf(temp, "DO:%d,AO:%d", buff[0], buff[1]);
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 67)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 69)
        MOV     R4,#`?<Constant "DO:%d,AO:%d">` & 0xff
        MOV     R5,#(`?<Constant "DO:%d,AO:%d">` >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  411 
//  412     //lcd ÏÔÊ¾
//  413     HalLcdWriteString( temp, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  414 
//  415     //´®¿ÚÊä³ö
//  416     HalUARTWrite(0, temp, osal_strlen(temp));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  417     HalUARTWrite(0, "\r\n", 2);
//  418   }
//  419   
//  420   //ÎŞÏß·¢ËÍµ½Ğ­µ÷Æ÷
//  421   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  422                        SAMPLEAPP_P2P_CLUSTERID,
//  423                        2,
//  424                        buff,
//  425                        &SampleApp_MsgID,
//  426                        AF_DISCV_ROUTE,
//  427                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 70)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 72)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  428   {
//  429   }
//  430   else
//  431   {
//  432     // Error occurred in request to send.
//  433   }
//  434 }
        MOV     A,#0x37
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleApp_epDesc>`:
        DATA8
        DB 11
        DATA16
        DW SampleApp_TaskID
        DW SampleApp_SimpleDesc
        DATA8
        DB 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetLight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_P2P_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DO:%d,AO:%d">`:
        DB "DO:%d,AO:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        END
//  435 
//  436 
// 
// 838 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//   6 bytes in segment XDATA_I
//   6 bytes in segment XDATA_ID
// 114 bytes in segment XDATA_ROM_C
// 122 bytes in segment XDATA_Z
// 
// 880 bytes of CODE  memory
// 106 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 4 bytes shared)
// 128 bytes of XDATA memory
//
//Errors: none
//Warnings: 15
