###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             13/May/2019  11:10:30 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Components\hal\target\C #
#                          C2530EB\hal_lcd-ssd1331.c                          #
#    Command line       =  -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95. #
#                          ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾ #
#                          ¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func         #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO      #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Components\hal\target\CC2530EB\hal_lcd-ssd1331.c" #
#                           -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D        #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95 #
#                          .ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨ #
#                          ¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\EndDeviceEB\List\" -lA    #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\EndDeviceEB\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95. #
#                          ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾ #
#                          ¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\" -I                       #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\Source\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I  #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\hal #
#                          \include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\ #
#                          2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬ #
#                          Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\hal\target\CC2530EB\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\ #
#                          2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬ #
#                          Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\high_level\" -I                     #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf04\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ· #
#                          \2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷( #
#                          AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\ #
#                          95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø #
#                          ±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\201 #
#                          9.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ #
#                          ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\osal\include\" -I                          #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\ser #
#                          vices\saddr\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ #
#                          ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍD #
#                          OÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\services\sdata\" -I                  #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\sta #
#                          ck\af\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\201 #
#                          9.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ #
#                          ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\nwk\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ #
#                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ #
#                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sapi\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\sta #
#                          ck\sec\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\20 #
#                          19.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê± #
#                          ¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\stack\sys\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²ú #
#                          Æ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ #
#                          ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1 #
#                          a\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\zdo\" -I                #
#                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig #
#                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ #
#                          ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\zma #
#                          c\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ #
#                          \95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ #
#                          ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\zmac\f8w\" -Ohz                                #
#    List file          =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\List\hal_lcd-ssd13 #
#                          31.lst                                             #
#    Object file        =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigB #
#                          eeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\Z #
#                          Stack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\Obj\hal_lcd-ssd133 #
#                          1.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd-ssd1331.c
      1          /****************************************************************************
      2          * Filename: hal_lcd.c
      3          * Description: OLED driver
      4          ****************************************************************************/
      5          #include "hal_types.h"
      6          #include "hal_lcd.h"
      7          #include "OSAL.h"
      8          #include "OnBoard.h"
      9          #include "hal_assert.h"
     10          #include <string.h>
     11          
     12          #ifdef OLED_1331
     13          
     14          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     15            #include "DebugTrace.h"
     16          #endif
     17          
     18          #define LCD_SCL P1_2       //SCLK  Ê±ÖÓ D0£¨SCLK£©
     19          #define LCD_SDA P1_3       //SDA   D1£¨MOSI£© Êý¾Ý
     20          #define LCD_RST P1_7       //_RES  hardware reset   ¸´Î» 
     21          #define LCD_DC  P0_0       //A0  H/L ÃüÁîÊý¾ÝÑ¡Í¨¶Ë£¬H£ºÊý¾Ý£¬L:ÃüÁî
     22          
     23          #define   red     0xF800
     24          #define   green   0x07E0
     25          #define   blue    0x001F
     26          #define   black   0x0000
     27          #define   white   0xFFFF
     28          
     29          
     30          #define XLevelL            0x00
     31          #define XLevelH            0x10
     32          #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
     33          #define Max_Column         128
     34          #define Max_Row            64
     35          #define Brightness         0xCF 
     36          #define X_WIDTH            128
     37          #define Y_WIDTH            64
     38          
     39          #define LCD_MAX_BUF        25
     40          #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
     41          
     42          //Ó¢ÎÄ±àÂëÎª0~127£¬ËùÒÔ´óÓÚ127µÄÖÐÎÄ
     43          #define IS_CHINESE(x)       (((unsigned char)(x))>(unsigned char)0x7f )
     44          
     45          uint16 hz_clor=0x001f;  //À¶É«
     46          
     47          //×ÝÏòÈ¡Ä£
     48          
     49          const unsigned char ascii_table_8x16[95][16]={
     50          
     51          //´ÖÌå8x16µãÕóµÄASCIIÂëµÄµãÕóÊý¾Ý£¬´Ó"JLX-GB2312"ÐÍºÅµÄ×Ö¿âICÖÐ¶Á³öÀ´µÄ¹ú±êµÄ¡£
     52          0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//- -(¼´¡°¿Õ¸ñ¡±£©ASCIIÂë£º0X20
     53          0x00,0x00,0x38,0xFC, 0xFC,0x38,0x00,0x00, 0x00,0x00,0x00,0x0D, 0x0D,0x00,0x00,0x00,		//-!-			ASCIIÂë£º0X21
     54          0x00,0x0E,0x1E,0x00, 0x00,0x1E,0x0E,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  	//-"-
     55          0x20,0xF8,0xF8,0x20, 0xF8,0xF8,0x20,0x00, 0x02,0x0F,0x0F,0x02, 0x0F,0x0F,0x02,0x00,  	//-#-
     56          0x38,0x7C,0x44,0x47, 0x47,0xCC,0x98,0x00, 0x06,0x0C,0x08,0x38, 0x38,0x0F,0x07,0x00,  	//-$-
     57          0x30,0x30,0x00,0x80, 0xC0,0x60,0x30,0x00, 0x0C,0x06,0x03,0x01, 0x00,0x0C,0x0C,0x00,   	//-%-
     58          0x80,0xD8,0x7C,0xE4, 0xBC,0xD8,0x40,0x00, 0x07,0x0F,0x08,0x08, 0x07,0x0F,0x08,0x00,		//-&-
     59          0x00,0x10,0x1E,0x0E, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//-'-
     60          0x00,0x00,0xF0,0xF8, 0x0C,0x04,0x00,0x00, 0x00,0x00,0x03,0x07, 0x0C,0x08,0x00,0x00,		//-(-
     61          0x00,0x00,0x04,0x0C, 0xF8,0xF0,0x00,0x00, 0x00,0x00,0x08,0x0C, 0x07,0x03,0x00,0x00,		//-)-
     62          
     63          0x80,0xA0,0xE0,0xC0, 0xC0,0xE0,0xA0,0x80, 0x00,0x02,0x03,0x01, 0x01,0x03,0x02,0x00,		//-*-			ASCIIÂë£º0X2A
     64          0x00,0x80,0x80,0xE0, 0xE0,0x80,0x80,0x00, 0x00,0x00,0x00,0x03, 0x03,0x00,0x00,0x00,		//-+-
     65          0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x10,0x1E, 0x0E,0x00,0x00,0x00,		//-,-
     66          0x80,0x80,0x80,0x80, 0x80,0x80,0x80,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//---
     67          0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x0C, 0x0C,0x00,0x00,0x00,		//-.-
     68          0x00,0x00,0x00,0x80, 0xC0,0x60,0x30,0x00, 0x0C,0x06,0x03,0x01, 0x00,0x00,0x00,0x00,		//-/-
     69          0xF8,0xF8,0x0C,0xC4, 0x0C,0xF8,0xF0,0x00, 0x03,0x07,0x0C,0x08, 0x0C,0x07,0x03,0x00,		//-0-		  	ASCIIÂë£º0X30
     70          0x00,0x10,0x18,0xFC, 0xFC,0x00,0x00,0x00, 0x00,0x08,0x08,0x0F, 0x0F,0x08,0x08,0x00,		//-1-
     71          0x08,0x0C,0x84,0xC4, 0x64,0x3C,0x18,0x00, 0x0E,0x0F,0x09,0x08, 0x08,0x0C,0x0C,0x00,		//-2-
     72          0x08,0x0C,0x44,0x44, 0x44,0xFC,0xB8,0x00, 0x04,0x0C,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-3-
     73          
     74          0xC0,0xE0,0xB0,0x98, 0xFC,0xFC,0x80,0x00, 0x00,0x00,0x00,0x08, 0x0F,0x0F,0x08,0x00,		//-4-			ASCIIÂë£º0X34
     75          0x7C,0x7C,0x44,0x44, 0x44,0xC4,0x84,0x00, 0x04,0x0C,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-5-
     76          0xF0,0xF8,0x4C,0x44, 0x44,0xC0,0x80,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-6-
     77          0x0C,0x0C,0x04,0x84, 0xC4,0x7C,0x3C,0x00, 0x00,0x00,0x0F,0x0F, 0x00,0x00,0x00,0x00,		//-7-
     78          0xB8,0xFC,0x44,0x44, 0x44,0xFC,0xB8,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-8-
     79          0x38,0x7C,0x44,0x44, 0x44,0xFC,0xF8,0x00, 0x00,0x08,0x08,0x08, 0x0C,0x07,0x03,0x00,		//-9-
     80          0x00,0x00,0x00,0x30, 0x30,0x00,0x00,0x00, 0x00,0x00,0x00,0x06, 0x06,0x00,0x00,0x00,		//-:-
     81          0x00,0x00,0x00,0x30, 0x30,0x00,0x00,0x00, 0x00,0x00,0x08,0x0E, 0x06,0x00,0x00,0x00,		//-;-
     82          0x00,0x80,0xC0,0x60, 0x30,0x18,0x08,0x00, 0x00,0x00,0x01,0x03, 0x06,0x0C,0x08,0x00,		//-<-
     83          0x00,0x20,0x20,0x20, 0x20,0x20,0x20,0x00, 0x00,0x01,0x01,0x01, 0x01,0x01,0x01,0x00,		//-=-
     84          
     85          0x00,0x08,0x18,0x30, 0x60,0xC0,0x80,0x00, 0x00,0x08,0x0C,0x06, 0x03,0x01,0x00,0x00,		//->-			ASCIIÂë£º0X3E
     86          0x18,0x1C,0x04,0xC4, 0xE4,0x3C,0x18,0x00, 0x00,0x00,0x00,0x0D, 0x0D,0x00,0x00,0x00,		//-?-
     87          0xF0,0xF0,0x08,0xC8, 0xC8,0xF8,0xF0,0x00, 0x07,0x0F,0x08,0x0B, 0x0B,0x0B,0x01,0x00,		//-@-
     88          0xE0,0xF0,0x98,0x8C, 0x98,0xF0,0xE0,0x00, 0x0F,0x0F,0x00,0x00, 0x00,0x0F,0x0F,0x00,		//-A-			ASCIIÂë£º0X41
     89          0x04,0xFC,0xFC,0x44, 0x44,0xFC,0xB8,0x00, 0x08,0x0F,0x0F,0x08, 0x08,0x0F,0x07,0x00,		//-B-
     90          0xF0,0xF8,0x0C,0x04, 0x04,0x0C,0x18,0x00, 0x03,0x07,0x0C,0x08, 0x08,0x0C,0x06,0x00,		//-C-
     91          0x04,0xFC,0xFC,0x04, 0x0C,0xF8,0xF0,0x00, 0x08,0x0F,0x0F,0x08, 0x0C,0x07,0x03,0x00,		//-D-
     92          0x04,0xFC,0xFC,0x44, 0xE4,0x0C,0x1C,0x00, 0x08,0x0F,0x0F,0x08, 0x08,0x0C,0x0E,0x00,		//-E-
     93          0x04,0xFC,0xFC,0x44, 0xE4,0x0C,0x1C,0x00, 0x08,0x0F,0x0F,0x08, 0x00,0x00,0x00,0x00,		//-F-
     94          0xF0,0xF8,0x0C,0x84, 0x84,0x8C,0x98,0x00, 0x03,0x07,0x0C,0x08, 0x08,0x07,0x0F,0x00,		//-G-
     95          
     96          0xFC,0xFC,0x40,0x40, 0x40,0xFC,0xFC,0x00, 0x0F,0x0F,0x00,0x00, 0x00,0x0F,0x0F,0x00,		//-H-			ASCIIÂë£º0X48
     97          0x00,0x00,0x04,0xFC, 0xFC,0x04,0x00,0x00, 0x00,0x00,0x08,0x0F, 0x0F,0x08,0x00,0x00,		//-I-
     98          0x00,0x00,0x00,0x04, 0xFC,0xFC,0x04,0x00, 0x07,0x0F,0x08,0x08, 0x0F,0x07,0x00,0x00,		//-J-
     99          0x04,0xFC,0xFC,0xC0, 0xE0,0x3C,0x1C,0x00, 0x08,0x0F,0x0F,0x00, 0x01,0x0F,0x0E,0x00,		//-K-
    100          0x04,0xFC,0xFC,0x04, 0x00,0x00,0x00,0x00, 0x08,0x0F,0x0F,0x08, 0x08,0x0C,0x0E,0x00,		//-L-
    101          0xFC,0xFC,0x38,0x70, 0x38,0xFC,0xFC,0x00, 0x0F,0x0F,0x00,0x00, 0x00,0x0F,0x0F,0x00,		//-M-
    102          0xFC,0xFC,0x38,0x70, 0xE0,0xFC,0xFC,0x00, 0x0F,0x0F,0x00,0x00, 0x00,0x0F,0x0F,0x00,		//-N-
    103          0xF8,0xFC,0x04,0x04, 0x04,0xFC,0xF8,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-O-
    104          0x04,0xFC,0xFC,0x44, 0x44,0x7C,0x38,0x00, 0x08,0x0F,0x0F,0x08, 0x00,0x00,0x00,0x00,		//-P-
    105          0xF8,0xFC,0x04,0x04, 0x04,0xFC,0xF8,0x00, 0x07,0x0F,0x08,0x0E, 0x3C,0x3F,0x27,0x00,		//-Q-
    106          
    107          0x04,0xFC,0xFC,0x44, 0xC4,0xFC,0x38,0x00, 0x08,0x0F,0x0F,0x00, 0x00,0x0F,0x0F,0x00,		//-R-
    108          0x18,0x3C,0x64,0x44, 0xC4,0x9C,0x18,0x00, 0x06,0x0E,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-S-		 
    109          0x00,0x1C,0x0C,0xFC, 0xFC,0x0C,0x1C,0x00, 0x00,0x00,0x08,0x0F, 0x0F,0x08,0x00,0x00,		//-T-
    110          0xFC,0xFC,0x00,0x00, 0x00,0xFC,0xFC,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-U-
    111          0xFC,0xFC,0x00,0x00, 0x00,0xFC,0xFC,0x00, 0x01,0x03,0x06,0x0C, 0x06,0x03,0x01,0x00,		//-V-
    112          0xFC,0xFC,0x00,0x00, 0x00,0xFC,0xFC,0x00, 0x07,0x0F,0x0E,0x03, 0x0E,0x0F,0x07,0x00,		//-W-
    113          0x0C,0x3C,0xF0,0xE0, 0xF0,0x3C,0x0C,0x00, 0x0C,0x0F,0x03,0x01, 0x03,0x0F,0x0C,0x00,		//-X-
    114          0x00,0x0C,0x7C,0xC0, 0xC0,0x7C,0x3C,0x00, 0x00,0x00,0x08,0x0F, 0x0F,0x08,0x00,0x00,		//-Y-
    115          0x1C,0x0C,0x84,0xC4, 0x64,0x3C,0x1C,0x00, 0x0E,0x0F,0x09,0x08, 0x08,0x0C,0x0E,0x00,		//-Z-
    116          0x00,0x00,0xFC,0xFC, 0x04,0x04,0x00,0x00, 0x00,0x00,0x0F,0x0F, 0x08,0x08,0x00,0x00,		//-[-
    117          
    118          0x38,0x70,0xE0,0xC0, 0x80,0x00,0x00,0x00, 0x00,0x00,0x00,0x01, 0x03,0x07,0x0E,0x00,		//-\-
    119          0x00,0x00,0x04,0x04, 0xFC,0xFC,0x00,0x00, 0x00,0x00,0x08,0x08, 0x0F,0x0F,0x00,0x00,		//-]-		  
    120          0x08,0x0C,0x06,0x03, 0x06,0x0C,0x08,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//-^-
    121          0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x20,0x20,0x20,0x20, 0x20,0x20,0x20,0x20,		//-_-
    122          0x00,0x00,0x03,0x07, 0x04,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//-`-
    123          0x00,0xA0,0xA0,0xA0, 0xE0,0xC0,0x00,0x00, 0x07,0x0F,0x08,0x08, 0x07,0x0F,0x08,0x00,		//-a-			ASCIIÂë£º0X61
    124          0x04,0xFC,0xFC,0x20, 0x60,0xC0,0x80,0x00, 0x00,0x0F,0x0F,0x08, 0x08,0x0F,0x07,0x00,		//-b-
    125          0xC0,0xE0,0x20,0x20, 0x20,0x60,0x40,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0C,0x04,0x00,		//-c-
    126          0x80,0xC0,0x60,0x24, 0xFC,0xFC,0x00,0x00, 0x07,0x0F,0x08,0x08, 0x07,0x0F,0x08,0x00,		//-d-
    127          0xC0,0xE0,0xA0,0xA0, 0xA0,0xE0,0xC0,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0C,0x04,0x00,		//-e-
    128          
    129          0x40,0xF8,0xFC,0x44, 0x0C,0x18,0x00,0x00, 0x08,0x0F,0x0F,0x08, 0x00,0x00,0x00,0x00,		//-f-
    130          0xC0,0xE0,0x20,0x20, 0xC0,0xE0,0x20,0x00, 0x27,0x6F,0x48,0x48, 0x7F,0x3F,0x00,0x00,		//-g-		  
    131          0x04,0xFC,0xFC,0x40, 0x20,0xE0,0xC0,0x00, 0x08,0x0F,0x0F,0x00, 0x00,0x0F,0x0F,0x00,		//-h-
    132          0x00,0x00,0x20,0xEC, 0xEC,0x00,0x00,0x00, 0x00,0x00,0x08,0x0F, 0x0F,0x08,0x00,0x00,		//-i-
    133          0x00,0x00,0x00,0x00, 0x20,0xEC,0xEC,0x00, 0x00,0x30,0x70,0x40, 0x40,0x7F,0x3F,0x00,		//-j-
    134          0x04,0xFC,0xFC,0x80, 0xC0,0x60,0x20,0x00, 0x08,0x0F,0x0F,0x01, 0x03,0x0E,0x0C,0x00,		//-k-
    135          0x00,0x00,0x04,0xFC, 0xFC,0x00,0x00,0x00, 0x00,0x00,0x08,0x0F, 0x0F,0x08,0x00,0x00,		//-l-
    136          0xE0,0xE0,0x60,0xC0, 0x60,0xE0,0xC0,0x00, 0x0F,0x0F,0x00,0x07, 0x00,0x0F,0x0F,0x00,		//-m-
    137          0x20,0xE0,0xC0,0x20, 0x20,0xE0,0xC0,0x00, 0x00,0x0F,0x0F,0x00, 0x00,0x0F,0x0F,0x00,		//-n-
    138          0xC0,0xE0,0x20,0x20, 0x20,0xE0,0xC0,0x00, 0x07,0x0F,0x08,0x08, 0x08,0x0F,0x07,0x00,		//-o-
    139          
    140          0x20,0xE0,0xC0,0x20, 0x20,0xE0,0xC0,0x00, 0x40,0x7F,0x7F,0x48, 0x08,0x0F,0x07,0x00,		//-p-
    141          0xC0,0xE0,0x20,0x20, 0xC0,0xE0,0x20,0x00, 0x07,0x0F,0x08,0x48, 0x7F,0x7F,0x40,0x00,		//-q-	 		
    142          0x20,0xE0,0xC0,0x60, 0x20,0xE0,0xC0,0x00, 0x08,0x0F,0x0F,0x08, 0x00,0x00,0x00,0x00,		//-r-
    143          0x40,0xE0,0xA0,0x20, 0x20,0x60,0x40,0x00, 0x04,0x0C,0x09,0x09, 0x0B,0x0E,0x04,0x00,		//-s-
    144          0x20,0x20,0xF8,0xFC, 0x20,0x20,0x00,0x00, 0x00,0x00,0x07,0x0F, 0x08,0x0C,0x04,0x00,		//-t-
    145          0xE0,0xE0,0x00,0x00, 0xE0,0xE0,0x00,0x00, 0x07,0x0F,0x08,0x08, 0x07,0x0F,0x08,0x00,		//-u-
    146          0x00,0xE0,0xE0,0x00, 0x00,0xE0,0xE0,0x00, 0x00,0x03,0x07,0x0C, 0x0C,0x07,0x03,0x00,		//-v-
    147          0xE0,0xE0,0x00,0x80, 0x00,0xE0,0xE0,0x00, 0x07,0x0F,0x0C,0x07, 0x0C,0x0F,0x07,0x00,		//-w-
    148          0x20,0x60,0xC0,0x80, 0xC0,0x60,0x20,0x00, 0x08,0x0C,0x07,0x03, 0x07,0x0C,0x08,0x00,		//-x-
    149          0xE0,0xE0,0x00,0x00, 0x00,0xE0,0xE0,0x00, 0x47,0x4F,0x48,0x48, 0x68,0x3F,0x1F,0x00,		//-y-
    150          
    151          0x60,0x60,0x20,0xA0, 0xE0,0x60,0x20,0x00, 0x0C,0x0E,0x0B,0x09, 0x08,0x0C,0x0C,0x00,		//-z-			//
    152          0x00,0x40,0x40,0xF8, 0xBC,0x04,0x04,0x00, 0x00,0x00,0x00,0x07, 0x0F,0x08,0x08,0x00,		//-{-			
    153          0x00,0x00,0x00,0xBC, 0xBC,0x00,0x00,0x00, 0x00,0x00,0x00,0x0F, 0x0F,0x00,0x00,0x00,		//-|-
    154          0x00,0x04,0x04,0xBC, 0xF8,0x40,0x40,0x00, 0x00,0x08,0x08,0x0F, 0x07,0x00,0x00,0x00,		//-}-
    155          0x08,0x0C,0x04,0x0C, 0x08,0x0C,0x04,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,		//-~-		   ASCIIÂë£º0X7E
    156          
    157          };
    158          
    159          const unsigned char ascii_table_5x8[95][5]={
    160          /*È«ÌåASCII ÁÐ±í:5x8µãÕó*/
    161          0x00,0x00,0x00,0x00,0x00,//- -   //space
    162          0x00,0x00,0x4f,0x00,0x00,//-!-
    163          0x00,0x07,0x00,0x07,0x00,//-"-
    164          0x14,0x7f,0x14,0x7f,0x14,//-#-
    165          0x24,0x2a,0x7f,0x2a,0x12,//-$-
    166          0x23,0x13,0x08,0x64,0x62,//-%-
    167          0x36,0x49,0x55,0x22,0x50,//-&-
    168          0x00,0x05,0x07,0x00,0x00,//-'-
    169          0x00,0x1c,0x22,0x41,0x00,//-(-
    170          0x00,0x41,0x22,0x1c,0x00,//-)-
    171          0x14,0x08,0x3e,0x08,0x14,//-*-
    172          0x08,0x08,0x3e,0x08,0x08,//-+-
    173          0x00,0x50,0x30,0x00,0x00,//-,-
    174          0x08,0x08,0x08,0x08,0x08,//---
    175          0x00,0x60,0x60,0x00,0x00,//-.-
    176          0x20,0x10,0x08,0x04,0x02,//-/-
    177          0x3e,0x51,0x49,0x45,0x3e,//-0-
    178          0x00,0x42,0x7f,0x40,0x00,//-1-
    179          0x42,0x61,0x51,0x49,0x46,//-2-
    180          0x21,0x41,0x45,0x4b,0x31,//-3-
    181          0x18,0x14,0x12,0x7f,0x10,//-4-
    182          0x27,0x45,0x45,0x45,0x39,//-5-
    183          0x3c,0x4a,0x49,0x49,0x30,//-6-
    184          0x01,0x71,0x09,0x05,0x03,//-7-
    185          0x36,0x49,0x49,0x49,0x36,//-8-
    186          0x06,0x49,0x49,0x29,0x1e,//-9-
    187          0x00,0x36,0x36,0x00,0x00,//-:-
    188          0x00,0x56,0x36,0x00,0x00,//-;-
    189          0x08,0x14,0x22,0x41,0x00,//-<-
    190          0x14,0x14,0x14,0x14,0x14,//-=-
    191          0x00,0x41,0x22,0x14,0x08,//->-
    192          0x02,0x01,0x51,0x09,0x06,//-?-
    193          0x32,0x49,0x79,0x41,0x3e,//-@-
    194          0x7e,0x11,0x11,0x11,0x7e,//-A-
    195          0x7f,0x49,0x49,0x49,0x36,//-B-
    196          0x3e,0x41,0x41,0x41,0x22,//-C-
    197          0x7f,0x41,0x41,0x22,0x1c,//-D-
    198          0x7f,0x49,0x49,0x49,0x41,//-E-
    199          0x7f,0x09,0x09,0x09,0x01,//-F-
    200          0x3e,0x41,0x49,0x49,0x7a,//-G-
    201          0x7f,0x08,0x08,0x08,0x7f,//-H-
    202          0x00,0x41,0x7f,0x41,0x00,//-I-
    203          0x20,0x40,0x41,0x3f,0x01,//-J-
    204          0x7f,0x08,0x14,0x22,0x41,//-K-
    205          0x7f,0x40,0x40,0x40,0x40,//-L-
    206          0x7f,0x02,0x0c,0x02,0x7f,//-M-
    207          0x7f,0x04,0x08,0x10,0x7f,//-N-
    208          0x3e,0x41,0x41,0x41,0x3e,//-O-
    209          0x7f,0x09,0x09,0x09,0x06,//-P-
    210          0x3e,0x41,0x51,0x21,0x5e,//-Q-
    211          0x7f,0x09,0x19,0x29,0x46,//-R-
    212          0x46,0x49,0x49,0x49,0x31,//-S-
    213          0x01,0x01,0x7f,0x01,0x01,//-T-
    214          0x3f,0x40,0x40,0x40,0x3f,//-U-
    215          0x1f,0x20,0x40,0x20,0x1f,//-V-
    216          0x3f,0x40,0x38,0x40,0x3f,//-W-
    217          0x63,0x14,0x08,0x14,0x63,//-X-
    218          0x07,0x08,0x70,0x08,0x07,//-Y-
    219          0x61,0x51,0x49,0x45,0x43,//-Z-
    220          0x00,0x7f,0x41,0x41,0x00,//-[-
    221          0x02,0x04,0x08,0x10,0x20,//-\-
    222          0x00,0x41,0x41,0x7f,0x00,//-]-
    223          0x04,0x02,0x01,0x02,0x04,//-^-
    224          0x40,0x40,0x40,0x40,0x40,//-_-
    225          0x01,0x02,0x04,0x00,0x00,//-`-
    226          0x20,0x54,0x54,0x54,0x78,//-a-
    227          0x7f,0x48,0x48,0x48,0x30,//-b-
    228          0x38,0x44,0x44,0x44,0x44,//-c-
    229          0x30,0x48,0x48,0x48,0x7f,//-d-
    230          0x38,0x54,0x54,0x54,0x58,//-e-
    231          0x00,0x08,0x7e,0x09,0x02,//-f-
    232          0x48,0x54,0x54,0x54,0x3c,//-g-
    233          0x7f,0x08,0x08,0x08,0x70,//-h-
    234          0x00,0x00,0x7a,0x00,0x00,//-i-
    235          0x20,0x40,0x40,0x3d,0x00,//-j-
    236          0x7f,0x20,0x28,0x44,0x00,//-k-
    237          0x00,0x41,0x7f,0x40,0x00,//-l-
    238          0x7c,0x04,0x38,0x04,0x7c,//-m-
    239          0x7c,0x08,0x04,0x04,0x78,//-n-
    240          0x38,0x44,0x44,0x44,0x38,//-o-
    241          0x7c,0x14,0x14,0x14,0x08,//-p-
    242          0x08,0x14,0x14,0x14,0x7c,//-q-
    243          0x7c,0x08,0x04,0x04,0x08,//-r-
    244          0x48,0x54,0x54,0x54,0x24,//-s-
    245          0x04,0x04,0x3f,0x44,0x24,//-t-
    246          0x3c,0x40,0x40,0x40,0x3c,//-u-
    247          0x1c,0x20,0x40,0x20,0x1c,//-v-
    248          0x3c,0x40,0x30,0x40,0x3c,//-w-
    249          0x44,0x28,0x10,0x28,0x44,//-x-
    250          0x04,0x48,0x30,0x08,0x04,//-y-
    251          0x44,0x64,0x54,0x4c,0x44,//-z-
    252          0x08,0x36,0x41,0x41,0x00,//-{-
    253          0x00,0x00,0x77,0x00,0x00,//-|-
    254          0x00,0x41,0x41,0x36,0x08,//-}-
    255          0x04,0x02,0x02,0x02,0x01,//-~-
    256          };
    257          
    258          //ÖÐÎÄ×Ö·û´®Ô­×Ö,¿ÉÒÔÀí½âÊÇÃ¿¸öºº×ÖµÄ¹ú±ê±àÂë£¬Ã¿¸öºº×ÖµÄ¹ú±ê±àÂëÊÇ2¸ö×Ö½Ú¡£
    259          const unsigned char Chinese_text_16x16[] = 
    260          {
    261              "ÉîÛÚÒÚÑÐµç×ÓÑÐ·¢´ç²ÊÉ«ÏÔÊ¾ÆÁ»¶Ó­Äú"
    262          };
    263          
    264          typedef struct _hz_16_16_
    265          {
    266              char* gpk;
    267              unsigned char code[32];
    268          }hanziku;
    269          
    270          //ºº×ÖµÄÈ¡Ä£µãÕó´úÂë£¬Ã¿¸öºº×ÖÓÉ16x16Î»×é³É£¬¼´£ºÒ»Î»¶ÔÓ¦Ò»¸öµãÕó£¬¹²¶ÔÓ¦16x16µãÕó£¬»»Ëã£º16x16=256bits=32bytes
    271          const hanziku tabel_hanzi[] =
    272          {
    273              //ÕÒ²»µ½¾ÍÏÔÊ¾Õâ¸ö£¬Á½¸ö¿Õ¸ñ
    274              {{"  "},
    275              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    276              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    277          
    278          
    279          /*--  ÎÄ×Ö:  ÎÂ  --*/
    280          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    281              {{"ÎÂ"},
    282              {0x10,0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,0x00,
    283              0x02,0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,0x00}},
    284          
    285          /*--  ÎÄ×Ö:  ¶È  --*/
    286          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    287              {{"¶È"},
    288              {0x00,0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,0x00,
    289              0x80,0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,0x00}},
    290          
    291          /*--  ÎÄ×Ö:  £º  --*/
    292          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    293              {{"£º"},
    294              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    295              0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    296          
    297          /*--  ÎÄ×Ö:  Êª  --*/
    298          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    299              {{"Êª"},
    300              {0x10,0x60,0x02,0xCC,0x00,0x00,0x3E,0x2A,0xAA,0x2A,0xAA,0x2A,0x3E,0x00,0x00,0x00,
    301              0x08,0x08,0xFE,0x01,0x40,0x42,0x4C,0x40,0x7F,0x40,0x7F,0x48,0x44,0x42,0x40,0x00}},
    302          
    303              /*--  ÎÄ×Ö:  ¹â  --*/
    304              /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    305              {{"¹â"},
    306              {0x40,0x40,0x42,0x44,0x58,0xC0,0x40,0x7F,0x40,0xC0,0x50,0x48,0x46,0x40,0x40,0x00,
    307              0x80,0x80,0x40,0x20,0x18,0x07,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,0x00}},
    308          
    309              /*--  ÎÄ×Ö:  ÕÕ  --*/
    310              /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    311              {{"ÕÕ"},
    312              {0x00,0xFE,0x42,0x42,0x42,0xFE,0x00,0x42,0xA2,0x9E,0x82,0xA2,0xC2,0xBE,0x00,0x00,
    313              0x80,0x6F,0x08,0x08,0x28,0xCF,0x00,0x00,0x2F,0xC8,0x08,0x08,0x28,0xCF,0x00,0x00}},
    314          
    315              /*--  ÎÄ×Ö:  ´ó  --*/
    316              /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    317              {{"´ó"},
    318              {0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xFF,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,
    319              0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00}},
    320          
    321              /*--  ÎÄ×Ö:  Ð¡  --*/
    322              /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    323              {{"Ð¡"},
    324              {0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x20,0x40,0x80,0x00,0x00,
    325              0x08,0x04,0x03,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x01,0x0E,0x00}},
    326          
    327              /*--  ÎÄ×Ö:  ÓÚ  --*/
    328              /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    329              {{"ÓÚ"},
    330              {0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
    331              0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    332          
    333              /*--  ÎÄ×Ö:  ±¨  --*/
    334              /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    335              {{"±¨"},
    336              {0x10,0x10,0x10,0xFF,0x10,0x90,0x00,0xFE,0x82,0x82,0x82,0x92,0xA2,0x9E,0x00,0x00,
    337              0x04,0x44,0x82,0x7F,0x01,0x00,0x00,0xFF,0x80,0x43,0x2C,0x10,0x2C,0x43,0x80,0x00}},
    338          
    339              /*--  ÎÄ×Ö:  ¾¯  --*/
    340              /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
    341              {{"¾¯"},
    342              {0x12,0xEA,0xAF,0xAA,0xEA,0x0F,0xFA,0x02,0x88,0x8C,0x57,0x24,0x54,0x8C,0x84,0x00,
    343              0x02,0x02,0xEA,0xAA,0xAA,0xAB,0xAA,0xAB,0xAA,0xAA,0xAA,0xAA,0xEA,0x02,0x02,0x00}},
    344          };
    345          
    346          
    347          
    348          #if (HAL_LCD == TRUE)
    349          void init_SSD1331(void);
    350          void HalLcd_HW_WaitUs(uint16 i);
    351          void HalLcd_HW_Clear(void);
    352          void HalLcd_HW_Control(uint8 cmd);
    353          void HalLcd_HW_Write(uint8 data);
    354          void HalLcd_HW_SetContrast(uint8 value);
    355          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    356          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    357          
    358          void DelayMS(unsigned int msec);
    359          void LCD_DLY_ms(unsigned int ms);
    360          void LCD_WrDat(unsigned char dat);
    361          void LCD_WrCmd(unsigned char cmd);
    362          void LCD_Set_Pos(unsigned char x, unsigned char y);
    363          void LCD_Fill(unsigned char bmp_dat) ;
    364          void LCD_CLS(void);
    365          void LcdClearLine(unsigned char y, unsigned char count);
    366          
    367          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
    368          void HalLcdDisplayPercentBar( char *title, uint8 value );
    369          void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N);
    370          
    371          void display_string_8x16(uint8 row,uint8 column,uint8 *text);
    372          void display_string_5x8(uint8 row,uint8 column,uint8 reverse,uint8 *text);
    373          void disp_string_8x16_16x16(uint8 row,uint8 column,uint8 *text); 
    374          #endif //LCD
    375          
    376          
    377          /**************************************************************************************************
    378           * @fn      HalLcdInit
    379           *
    380           * @brief   Initilize LCD Service
    381           *
    382           * @param   init - pointer to void that contains the initialized value
    383           *
    384           * @return  None
    385           **************************************************************************************************/
    386          void HalLcdInit(void)
    387          {
    388          #if (HAL_LCD == TRUE)
    389            init_SSD1331();
    390          #endif
    391          }
    392          
    393          /**************************************************************************************************
    394           * @fn      HalLcdWriteValue
    395           *
    396           * @brief   Write a value to the LCD
    397           *
    398           * @param   value  - value that will be displayed
    399           *          radix  - 8, 10, 16
    400           *          option - display options
    401           *
    402           * @return  None
    403           **************************************************************************************************/
    404          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
    405          {
    406          #if (HAL_LCD == TRUE)
    407            uint8 buf[LCD_MAX_BUF];
    408          
    409            _ltoa( value, &buf[0], radix );
    410            HalLcdWriteString( (char*)buf, option );
    411          #endif
    412          }
    413          
    414          /**************************************************************************************************
    415           * @fn      HalLcdWriteScreen
    416           *
    417           * @brief   Write a value to the LCD
    418           *
    419           * @param   line1  - string that will be displayed on line 1
    420           *          line2  - string that will be displayed on line 2
    421           *
    422           * @return  None
    423           **************************************************************************************************/
    424          void HalLcdWriteScreen( char *line1, char *line2 )
    425          {
    426          #if (HAL_LCD == TRUE)
    427            HalLcdWriteString( line1, 1 );
    428            HalLcdWriteString( line2, 2 );
    429          #endif
    430          }
    431          
    432          /**************************************************************************************************
    433           * @fn      HalLcdWriteStringValue
    434           *
    435           * @brief   Write a string followed by a value to the LCD
    436           *
    437           * @param   title  - Title that will be displayed before the value
    438           *          value  - value
    439           *          format - redix
    440           *          line   - line number
    441           *
    442           * @return  None
    443           **************************************************************************************************/
    444          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
    445          {
    446          #if (HAL_LCD == TRUE)
    447            uint8 tmpLen;
    448            uint8 buf[LCD_MAX_BUF];
    449            uint32 err;
    450          
    451            tmpLen = (uint8)osal_strlen( (char*)title );
    452            osal_memcpy( buf, title, tmpLen );
    453            //buf[tmpLen] = ' ';
    454            err = (uint32)(value);
    455            _ltoa( err, &buf[tmpLen], format );
    456            HalLcdWriteString( (char*)buf, line );		
    457          #endif
    458          }
    459          
    460          /**************************************************************************************************
    461           * @fn      HalLcdWriteStringValue
    462           *
    463           * @brief   Write a string followed by a value to the LCD
    464           *
    465           * @param   title   - Title that will be displayed before the value
    466           *          value1  - value #1
    467           *          format1 - redix of value #1
    468           *          value2  - value #2
    469           *          format2 - redix of value #2
    470           *          line    - line number
    471           *
    472           * @return  None
    473           **************************************************************************************************/
    474          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
    475                                            uint16 value2, uint8 format2, uint8 line )
    476          {
    477          
    478          #if (HAL_LCD == TRUE)
    479          
    480            uint8 tmpLen;
    481            uint8 buf[LCD_MAX_BUF];
    482            uint32 err;
    483          
    484            tmpLen = (uint8)osal_strlen( (char*)title );
    485            if ( tmpLen )
    486            {
    487              osal_memcpy( buf, title, tmpLen );
    488              //buf[tmpLen++] = ' ';
    489            }
    490          
    491            err = (uint32)(value1);
    492            _ltoa( err, &buf[tmpLen], format1 );
    493            tmpLen = (uint8)osal_strlen( (char*)buf );
    494          
    495            buf[tmpLen++] = ',';
    496            buf[tmpLen++] = ' ';
    497            err = (uint32)(value2);
    498            _ltoa( err, &buf[tmpLen], format2 );
    499          
    500            HalLcdWriteString( (char *)buf, line );		
    501          
    502          #endif
    503          }
    504          
    505          #if (HAL_LCD == TRUE)
    506          
    507          /*********************LCDÈ«ÆÁ************************************/
    508          void LCD_Fill(unsigned char bmp_dat) 
    509          {
    510          }
    511          
    512          void LCD_SetColor(uint16 c)
    513          {
    514            hz_clor=c;
    515          }
    516          
    517          void LcdClearLine(unsigned char y, unsigned char count)
    518          {
    519          
    520          }
    521          
    522          void HalLcdWriteString (char *str, uint8 option)
    523          {
    524            uint8 x=0,y=0,strLen;
    525            uint8 lcdBuf[HAL_LCD_MAX_CHARS+1];
    526              
    527            x=0;
    528            y = (option-1)*8;
    529            strLen = (uint8)osal_strlen( (char*)str );
    530          
    531            /* Check boundries */
    532            if ( strLen > HAL_LCD_MAX_CHARS )
    533              strLen = HAL_LCD_MAX_CHARS;
    534          
    535            osal_memset(lcdBuf, 0, HAL_LCD_MAX_CHARS+1);
    536            osal_memcpy( lcdBuf, str, strLen );
    537          
    538            //ÉèÖÃÃ¿Ò»ÐÐ×ÖµÄÑÕÉ«
    539            if(option==HAL_LCD_LINE_1)
    540            {
    541              LCD_SetColor(red);
    542            }
    543            else if(option==HAL_LCD_LINE_2)
    544            {
    545              LCD_SetColor(blue);
    546            }
    547            else if(option==HAL_LCD_LINE_3)
    548            {
    549              LCD_SetColor(blue);
    550            }
    551            else if(option==HAL_LCD_LINE_4)
    552            {
    553              LCD_SetColor(blue);
    554            }
    555            else if(option==HAL_LCD_LINE_5)
    556            {
    557              LCD_SetColor(blue);
    558            }
    559            else if(option==HAL_LCD_LINE_6)
    560            {
    561              LCD_SetColor(blue);
    562            }
    563            else if(option==HAL_LCD_LINE_7)
    564            {
    565              LCD_SetColor(blue);
    566            }
    567            else if(option==HAL_LCD_LINE_8)
    568            {
    569              LCD_SetColor(blue);
    570            }
    571          
    572            display_string_5x8(y, 0, 0, lcdBuf);
    573          }
    574          
    575          /***ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7***/
    576          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
    577          {
    578              unsigned char c=0,i=0,j=0;
    579              unsigned char* addr=0;
    580              unsigned char wm=0;
    581          
    582              display_string_8x16(y, x, ch);  //ÏÔÊ¾×ÖÄ¸
    583          }
    584          
    585          void DelayMS(unsigned int msec)
    586          { 
    587              unsigned int i,j;
    588              
    589              for (i=0; i<msec; i++)
    590                  for (j=0; j<600; j++);
    591          }
    592          
    593          void asm_delay()
    594          {
    595          //    asm("nop"); 
    596          //    asm("nop"); 
    597          //    asm("nop");
    598          }
    599          
    600          void write_com(unsigned char data1)
    601          {
    602              uint8 i;
    603              //  lcd_cs1=0;
    604              LCD_DC=0;  
    605            //  asm_delay();
    606          
    607              for(i=0;i<8;i++)
    608              {
    609                  LCD_SCL = 0;    
    610                  if (data1 & 0x80)
    611                  {
    612                    LCD_SDA = 1;
    613                  }
    614                  else
    615                  {
    616                    LCD_SDA = 0;
    617                  }
    618          
    619          //        asm_delay();
    620                  LCD_SCL = 1; 
    621            //      asm_delay();
    622                  data1 <<= 1;    
    623              }
    624            //  lcd_cs1=1;
    625          }
    626          
    627          void write_dat(unsigned char data1)
    628          {
    629              uint8 i;
    630              // lcd_cs1=0;
    631              LCD_DC= 1;
    632             // asm_delay();
    633             
    634              for(i=0;i<8;i++)
    635              {
    636                  LCD_SCL = 0;    
    637                  if (data1 & 0x80)
    638                  {
    639                    LCD_SDA = 1;
    640                  }
    641                  else
    642                  {
    643                    LCD_SDA = 0;
    644                  }
    645                  
    646                //  asm_delay();
    647                  LCD_SCL = 1;
    648                //  asm_delay();
    649                  data1 <<= 1;    
    650              }
    651           //   lcd_cs1=1;
    652          }
    653          
    654          void RAM_ADDRESS(void)
    655          { 
    656            write_com(0x15);
    657            write_com(0x00);
    658            write_com(0x5f);
    659          
    660            write_com(0x75);
    661            write_com(0x00);
    662            write_com(0x3f);
    663          }
    664          
    665          //È«ÆÁÇåÆÁ  ºÚÉ«
    666          void clear_screen()
    667          {
    668            int i,j;
    669            RAM_ADDRESS();
    670            for(i=0;i<96;i++) 
    671            {
    672              for(j=0;j<64;j++)
    673              {
    674                write_dat(0x00);//RAM data write
    675                write_dat(0x00);//RAM data write
    676              }
    677            }
    678          }
    679          
    680          void LCD_CLS(void)
    681          {
    682            clear_screen();
    683          }
    684          
    685          
    686          void  set_address(uint8 row,uint8 column)
    687          {
    688            write_com(0x15);	  
    689            write_com(column);	//X start 
    690            write_com(column);	//X end 
    691          
    692            write_com(0x75);	
    693            write_com(row);	//Y start 
    694            write_com(row+7);	//Y end 			
    695          }
    696          
    697          
    698          void transfer_data(uint8 data1) 
    699          {
    700            uint8 i; 
    701            uint8 clorh=hz_clor>>8; 
    702            uint8 clorl=hz_clor&0x00ff;
    703          
    704            for(i=0;i<8;i++)
    705            {
    706              if (data1& 0x01)	
    707              { 	
    708                write_dat(clorh);   //ÉèÖÃ×ÖÌåÑÕÉ«
    709                write_dat(clorl);
    710              }
    711              else  			
    712              {
    713                write_dat(0x00);   //ÉèÖÃ±³¾°°×É«
    714                write_dat(0x00);
    715              }
    716          
    717              data1>>= 1;
    718            }
    719          }
    720          
    721          
    722          void init_SSD1331()
    723          {
    724            P0SEL &= ~0x11; //ÈÃP0.0ÎªÆÕÍ¨IO¿Ú£¬
    725            P0DIR |= 0x11; //ÈÃP0.0ÎªÎªÊä³ö
    726            
    727            P1SEL &= ~0x8C; //ÈÃ P1.2 P1.3 P1.7ÎªÆÕÍ¨IO¿Ú
    728            P1DIR |= 0x8C; //°Ñ P1.2 P1.3 1.7ÉèÖÃÎªÊä³ö
    729          
    730          //  lcd_cs1 =0;  
    731            LCD_RST=0;
    732            DelayMS(10);
    733            LCD_RST=1;
    734            DelayMS(10);
    735            
    736            write_com(0xfd);	// command lock
    737            write_com(0x12);
    738            write_com(0xae);	// display off
    739            write_com(0xa4); 	// Normal Display mode
    740            
    741            write_com(0x15);	//set column address
    742            write_com(0x00);	//column address start 00
    743            write_com(0x5f);	//column address end 95
    744            write_com(0x75);	//set row address
    745            write_com(0x00);	//row address start 00
    746            write_com(0x3f);	//row address end 63	
    747            
    748            write_com(0x87);	//master current control
    749            write_com(0x03);	//9/16(160uA)---??????,????(0x0a)
    750            
    751            write_com(0x83);	//Set Contrast for Color R
    752            write_com(0xA0);
    753            write_com(0x82);	//Set Contrast for Color G
    754            write_com(0xA0);
    755            write_com(0x81);	//Set Contrast for Color B
    756            write_com(0xA0);
    757            
    758            write_com(0x8a);
    759            write_com(0x61);
    760            write_com(0x8b);
    761            write_com(0x62);
    762            write_com(0x8c);
    763            write_com(0x63);
    764            
    765            write_com(0xa0);	//set re-map & data format
    766            write_com(0x72);	//Horizontal address increment
    767            
    768            write_com(0xa1);	//set display start line
    769            write_com(0x00);	//start 00 line
    770            write_com(0xa2);	//set display offset
    771            write_com(0x00);
    772            write_com(0xa8);	//set multiplex ratio
    773            write_com(0x3f);	//64MUX
    774          
    775            
    776            write_com(0xad);  
    777            write_com(0x8f);
    778            
    779            
    780            
    781            write_com(0xb0);	//set power save
    782            write_com(0x00);	//
    783            
    784            write_com(0xb1);
    785            write_com(0x11);	// Phase 2 period Phase 1 period  ???????
    786            write_com(0xb3);	// Set Display Clock Divide Ratio/ Oscillator Frequency
    787            write_com(0xF0);	// 0.97MHZ
    788            
    789            write_com(0xbb);	// set pre-charge
    790            write_com(0x3e);	// ---??????????
    791            write_com(0xbe);	//set Vcomh
    792            write_com(0x3e);	//0.83Vref
    793            
    794            
    795            
    796            write_com(0xad);	//Select external VCC supply at Display ON
    797            write_com(0x8e); 	//Select External VP voltage supply
    798            
    799            clear_screen();
    800            write_com(0xaf);	 //display on
    801            
    802          }
    803          
    804          void display_clor(uint8 clor1,uint8 clor2)
    805          {
    806            int i,j;
    807            RAM_ADDRESS();
    808            for(i=0;i<96;i++) 
    809            {
    810              for(j=0;j<64;j++)
    811              {
    812                write_dat(clor1);//RAM data write
    813                write_dat(clor2);//RAM data write
    814              }
    815            }
    816          }
    817          
    818          
    819          //ÏÔÊ¾8x16µÄµãÕóµÄ×Ö·û´®£¬À¨ºÅÀïµÄ²ÎÊý·Ö±ðÎª£¨Ò³,ÁÐ£¬×Ö·û´®Ö¸Õë£©
    820          void display_string_8x16(uint8 row,uint8 column,uint8 *text)
    821          {
    822          	uint16 i=0,j,k,n;
    823          	if(column>89)
    824          	{
    825          		column=1;
    826          
    827          	}
    828          	while(text[i]>0x00)
    829          	{	
    830          		if((text[i]>=0x20)&&(text[i]<=0x7e))
    831          		{
    832          			j=text[i]-0x20;
    833          			for(n=0;n<2;n++)
    834          			{			
    835          				for(k=0;k<8;k++)
    836          				{					
    837          					set_address(n*8+row,column+k);
    838          				transfer_data(ascii_table_8x16[j][k+8*n]);	//Ð´Êý¾Ýµ½LCD  
    839          				}
    840          			}
    841          			i++;
    842          			column+=8;
    843          		}
    844          		else
    845          		i++;
    846          	}
    847          }
    848          
    849          
    850          
    851          //ÏÔÊ¾5x8µÄµãÕóµÄ×Ö·û´®£¬À¨ºÅÀïµÄ²ÎÊý·Ö±ðÎª£¨Ò³,ÁÐ£¬×Ö·û´®Ö¸Õë£©
    852          void display_string_5x8(uint8 row,uint8 column,uint8 reverse,uint8 *text)
    853          {
    854            uint16 i=0,j,k,disp_data;
    855            while(text[i]>0x00)
    856            {	
    857              if((text[i]>=0x20)&&(text[i]<=0x7e))
    858              {
    859                j=text[i]-0x20;
    860                //		lcd_address(page,column);
    861                for(k=0;k<5;k++)
    862                {
    863                  if(reverse==1)
    864                  {
    865                  disp_data=~ascii_table_5x8[j][k];
    866                  }
    867                  else
    868                  {
    869                  disp_data=ascii_table_5x8[j][k];
    870                  }
    871                  set_address(row,column+k);
    872                  transfer_data(disp_data);	//Ð´Êý¾Ýµ½LCD,Ã¿Ð´Íê1×Ö½ÚµÄÊý¾ÝºóÁÐµØÖ·×Ô¶¯¼Ó1
    873                }
    874                
    875                set_address(row,column+5);   
    876                if(reverse==1)	transfer_data(0xff);	//Ð´ÈëÒ»ÁÐ¿Õ°×ÁÐ£¬Ê¹µÃ5x8µÄ×Ö·ûÓë×Ö·ûÖ®¼äÓÐÒ»ÁÐ¼ä¸ô£¬¸üÃÀ¹Û
    877                else	transfer_data(0x00);			//Ð´ÈëÒ»ÁÐ¿Õ°×ÁÐ£¬Ê¹µÃ5x8µÄ×Ö·ûÓë×Ö·ûÖ®¼äÓÐÒ»ÁÐ¼ä¸ô£¬¸üÃÀ¹Û
    878                i++;
    879                column+=6;
    880                if(column>91)
    881                {
    882                  column=1;
    883                }
    884              }
    885              else
    886              i++;
    887            }
    888          }
    889          
    890          unsigned char* getChineseCode(char* chinese)
    891          {
    892              int i;
    893              int tableLen=sizeof(tabel_hanzi)/sizeof(tabel_hanzi);
    894          
    895              if(chinese==0);
    896          
    897              for(i=0; i<tableLen; i++)
    898              {
    899                  if(tabel_hanzi[i].gpk[0]==chinese[0] && tabel_hanzi[i].gpk[1]==chinese[1])
    900                  {
    901                      return (unsigned char*)tabel_hanzi[i].code;
    902                  }
    903              }
    904          
    905              return (unsigned char*)tabel_hanzi[0].code;
    906          }
    907          
    908          //Ð´ÈëÒ»×é16x16µãÕóµÄºº×Ö×Ö·û´®£¨×Ö·û´®±í¸ñÖÐÐèº¬ÓÐ´Ë×Ö£©
    909          //À¨ºÅÀïµÄ²ÎÊý£º(Ò³£¬ÁÐ£¬ºº×Ö×Ö·û´®£©
    910          
    911          #if 1
    912          void display_string_16x16(uint8 row,uint8 column,uint8 *text)
    913          {
    914              uint8 i,j,k;
    915              unsigned char* addr=0;
    916              
    917              
    918              j = 0;
    919              while(text[j] != '\0')
    920              {
    921                  i = 0;
    922                  addr=getChineseCode(&text[j]);
    923                  
    924                  if(column > 81)
    925                  {
    926                      column = 0;
    927                  }
    928          
    929                  for(i = 0; i < 16; i++)               
    930                  {
    931                    set_address(k*8+row,column+i);
    932                    transfer_data(*(addr+i));     
    933                  }
    934                  
    935                  column+=16;
    936              }
    937          }
    938          
    939          #else
    940          
    941          void display_string_16x16(uint8 row,uint8 column,uint8 *text)
    942          {
    943              uint8 i,j,k;
    944              uint16 address; 
    945              
    946              j = 0;
    947              while(text[j] != '\0')
    948              {
    949                  i = 0;
    950                  address = 1;
    951                  while(Chinese_text_16x16[i] > 0x7e)	  // >0x7f¼´ËµÃ÷²»ÊÇASCIIÂë×Ö·û
    952                  {
    953                      if(Chinese_text_16x16[i] == text[j])
    954                      {
    955                          if(Chinese_text_16x16[i + 1] == text[j + 1])
    956                          {
    957                              address = i * 16;
    958                              break;
    959                          }
    960                      }
    961                      i += 2;            
    962                  }
    963                  
    964                  if(column > 81)
    965                  {
    966                      column = 0;
    967          
    968                  }
    969                  
    970                  if(address != 1)// ÏÔÊ¾ºº×Ö                   
    971                  {
    972                      
    973          			for(k=0;k<2;k++)
    974          			{
    975          			
    976          	            for(i = 0; i < 16; i++)               
    977          	            {
    978          	                set_address(k*8+row,column+i);
    979          					transfer_data(Chinese_code_16x16[address]);     
    980          	                address++;
    981          	            }
    982             			}
    983                      j += 2;        
    984                  }
    985                  else              //ÏÔÊ¾¿Õ°××Ö·û            
    986                  {
    987          			for(k=0;k<2;k++)
    988          			{
    989          			
    990          	            for(i = 0; i < 16; i++)               
    991          	            {
    992          	               set_address(k*8+row,column+i);
    993          				    transfer_data(0x00);   
    994          	            }
    995             			}
    996                      
    997                      j++;
    998                  }
    999                  
   1000                  column+=16;
   1001              }
   1002          }
   1003          #endif
   1004          
   1005          void disp_string_8x16_16x16(uint8 row,uint8 column,uint8 *text)
   1006          {
   1007              uint8 temp[3];
   1008              uint8 i = 0;    
   1009              
   1010              while(text[i] != '\0')
   1011              {
   1012                  if(text[i] > 0x7e)
   1013                  {
   1014                      temp[0] = text[i];
   1015                      temp[1] = text[i + 1];
   1016                      temp[2] = '\0';          //ºº×ÖÎªÁ½¸ö×Ö½Ú
   1017                      display_string_16x16(row,column,temp);  //ÏÔÊ¾ºº×Ö
   1018                      column += 16;
   1019                      i += 2;
   1020                  }
   1021                  else
   1022                  {
   1023                      temp[0] = text[i];    
   1024                      temp[1] = '\0';          //×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
   1025                      display_string_8x16(row, column, temp);  //ÏÔÊ¾×ÖÄ¸
   1026                      column += 8;
   1027                      i++;
   1028                  }
   1029              }
   1030          }
   1031          
   1032          #endif
   1033          
   1034          #endif


 

 


Errors: none
Warnings: none
