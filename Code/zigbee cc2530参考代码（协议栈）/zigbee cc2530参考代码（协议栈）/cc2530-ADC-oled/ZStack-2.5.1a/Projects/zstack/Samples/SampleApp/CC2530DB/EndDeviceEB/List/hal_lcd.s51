///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            13/May/2019  11:10:30 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig /
//                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯) /
//                          \ZStack-2.5.1a\ZStack-2.5.1a\Components\hal\targe /
//                          t\CC2530EB\hal_lcd.c                              /
//    Command line       =  -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95 /
//                          .ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø± /
//                          ¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²ú /
//                          Æ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸Ð /
//                          Æ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg"              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²ú /
//                          Æ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸Ð /
//                          Æ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Components\hal\target\CC2530EB\hal_lcd.c" -D  /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\EndDeviceEB\List\" -lA    /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\EndDeviceEB\List\"        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\EndDeviceEB\Obj\" -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\" -I                      /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\Source\" -I            /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" /
//                           -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\9 /
//                          5.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø /
//                          ±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ /
//                          ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ /
//                          ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5. /
//                          1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\hal\target\CC2530EB\" -I   /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\include\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2. /
//                          ¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AO /
//                          ºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\P /
//                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\high_level\" -I            /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\" -I                         /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\single_chip\" -I             /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mt\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019 /
//                          .ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ /
//                          ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\osal\include\" -I                       /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ· /
//                          \2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷ /
//                          (AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1 /
//                          a\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\services\sdata\" -I         /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\af\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨Ö /
//                          Æ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍD /
//                          OÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\nwk\" -I                    /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sapi\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶ /
//                          ¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOº /
//                          ÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sec\" -I                  /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sys\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ /
//                          ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍ /
//                          DOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\zdo\" -I                   /
//                          "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zi /
//                          gBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯ /
//                          )\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \zmac\" -I "E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\20 /
//                          19.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê /
//                          ±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\f8w\" -Ohz                       /
//    List file          =  E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.Zig /
//                          BeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯) /
//                          \ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\EndDeviceEB\List\hal_lcd.s /
//                          51                                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??DelayMS?relay
        FUNCTION ??DelayMS?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??HalLcd_HW_Init?relay
        FUNCTION ??HalLcd_HW_Init?relay,0203H
        PUBLIC ??HalLcd_HW_WaitUs?relay
        FUNCTION ??HalLcd_HW_WaitUs?relay,0203H
        PUBLIC ??LCD_CLS?relay
        FUNCTION ??LCD_CLS?relay,0203H
        PUBLIC ??LCD_DLY_ms?relay
        FUNCTION ??LCD_DLY_ms?relay,0203H
        PUBLIC ??LCD_Fill?relay
        FUNCTION ??LCD_Fill?relay,0203H
        PUBLIC ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,0203H
        PUBLIC ??LCD_Set_Pos?relay
        FUNCTION ??LCD_Set_Pos?relay,0203H
        PUBLIC ??LCD_WrCmd?relay
        FUNCTION ??LCD_WrCmd?relay,0203H
        PUBLIC ??LCD_WrDat?relay
        FUNCTION ??LCD_WrDat?relay,0203H
        PUBLIC ??LcdClearLine?relay
        FUNCTION ??LcdClearLine?relay,0203H
        PUBLIC ??getChineseCode?relay
        FUNCTION ??getChineseCode?relay,0203H
        PUBLIC DelayMS
        FUNCTION DelayMS,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC F8X16
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC HalLcd_HW_Init
        FUNCTION HalLcd_HW_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcd_HW_WaitUs
        FUNCTION HalLcd_HW_WaitUs,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC LCD_CLS
        FUNCTION LCD_CLS,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_DLY_ms
        FUNCTION LCD_DLY_ms,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_Fill
        FUNCTION LCD_Fill,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_P8x16Str
        FUNCTION LCD_P8x16Str,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC LCD_Set_Pos
        FUNCTION LCD_Set_Pos,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_WrCmd
        FUNCTION LCD_WrCmd,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_WrDat
        FUNCTION LCD_WrDat,0203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LcdClearLine
        FUNCTION LcdClearLine,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC getChineseCode
        FUNCTION getChineseCode,0203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC tabel_hanzi
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
_ltoa               SYMBOL "_ltoa"
??_ltoa?relay       SYMBOL "?relay", _ltoa
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen
DelayMS             SYMBOL "DelayMS"
??DelayMS?relay     SYMBOL "?relay", DelayMS
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
HalLcd_HW_Init      SYMBOL "HalLcd_HW_Init"
??HalLcd_HW_Init?relay SYMBOL "?relay", HalLcd_HW_Init
HalLcd_HW_WaitUs    SYMBOL "HalLcd_HW_WaitUs"
??HalLcd_HW_WaitUs?relay SYMBOL "?relay", HalLcd_HW_WaitUs
LCD_CLS             SYMBOL "LCD_CLS"
??LCD_CLS?relay     SYMBOL "?relay", LCD_CLS
LCD_DLY_ms          SYMBOL "LCD_DLY_ms"
??LCD_DLY_ms?relay  SYMBOL "?relay", LCD_DLY_ms
LCD_Fill            SYMBOL "LCD_Fill"
??LCD_Fill?relay    SYMBOL "?relay", LCD_Fill
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
LCD_Set_Pos         SYMBOL "LCD_Set_Pos"
??LCD_Set_Pos?relay SYMBOL "?relay", LCD_Set_Pos
LCD_WrCmd           SYMBOL "LCD_WrCmd"
??LCD_WrCmd?relay   SYMBOL "?relay", LCD_WrCmd
LCD_WrDat           SYMBOL "LCD_WrDat"
??LCD_WrDat?relay   SYMBOL "?relay", LCD_WrDat
LcdClearLine        SYMBOL "LcdClearLine"
??LcdClearLine?relay SYMBOL "?relay", LcdClearLine
getChineseCode      SYMBOL "getChineseCode"
??getChineseCode?relay SYMBOL "?relay", getChineseCode

        EXTERN ??_ltoa?relay
        FUNCTION ??_ltoa?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\ÌÔ±¦µêÆÌ\ºñ±¡µç×Ó\1.²úÆ·\2.¶¨ÖÆ\2019.ÉÏ\95.ZigBeeË®ÖÊ(»´¹¤)\10.¹âÃô´«¸ÐÆ÷(AOºÍDOÍ¬Ê±¼ì²â´ø±¨¾¯)\ZStack-2.5.1a\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
//    1 /****************************************************************************
//    2 * Filename: hal_lcd.c
//    3 * Author:  sz-yy.taobao.com
//    4 * Description: OLED driver
//    5 ****************************************************************************/
//    6 #include "hal_types.h"
//    7 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    8 #include "OSAL.h"
//    9 #include "OnBoard.h"
//   10 #include "hal_assert.h"
//   11 #include <string.h>
//   12 
//   13 #ifdef OLED_1306
//   14 
//   15 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//   16   #include "DebugTrace.h"
//   17 #endif
//   18 
//   19 #define LCD_SCL P1_2       //SCLK  Ê±ÖÓ D0£¨SCLK£©
//   20 #define LCD_SDA P1_3       //SDA   D1£¨MOSI£© Êý¾Ý
//   21 #define LCD_RST P1_7       //_RES  hardware reset   ¸´Î» 
//   22 #define LCD_DC  P0_0       //A0  H/L ÃüÁîÊý¾ÝÑ¡Í¨¶Ë£¬H£ºÊý¾Ý£¬L:ÃüÁî
//   23 
//   24 #define XLevelL            0x00
//   25 #define XLevelH            0x10
//   26 #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
//   27 #define Max_Column         128
//   28 #define Max_Row            64
//   29 #define Brightness         0xCF 
//   30 #define X_WIDTH            128
//   31 #define Y_WIDTH            64
//   32 
//   33 #define LCD_MAX_BUF        25
//   34 #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
//   35 
//   36 //Ó¢ÎÄ±àÂëÎª0~127£¬ËùÒÔ´óÓÚ127µÄÖÐÎÄ
//   37 #define IS_CHINESE(x)       (((unsigned char)(x))>(unsigned char)0x7f )
//   38 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   39 const unsigned char F8X16[]=	  
F8X16:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 51
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 12
        DB 6
        DB 16
        DB 12
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 192
        DB 120
        DB 64
        DB 192
        DB 120
        DB 64
        DB 0
        DB 4
        DB 63
        DB 4
        DB 4
        DB 63
        DB 4
        DB 4
        DB 0
        DB 0
        DB 112
        DB 136
        DB 252
        DB 8
        DB 48
        DB 0
        DB 0
        DB 0
        DB 24
        DB 32
        DB 255
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 240
        DB 0
        DB 224
        DB 24
        DB 0
        DB 0
        DB 0
        DB 33
        DB 28
        DB 3
        DB 30
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 0
        DB 30
        DB 33
        DB 35
        DB 36
        DB 25
        DB 39
        DB 33
        DB 16
        DB 16
        DB 22
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 24
        DB 4
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 64
        DB 0
        DB 0
        DB 2
        DB 4
        DB 24
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 24
        DB 7
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 128
        DB 240
        DB 128
        DB 64
        DB 64
        DB 0
        DB 2
        DB 2
        DB 1
        DB 15
        DB 1
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 31
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 176
        DB 112
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 24
        DB 4
        DB 0
        DB 96
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 0
        DB 16
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 112
        DB 8
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 48
        DB 40
        DB 36
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 48
        DB 8
        DB 136
        DB 136
        DB 72
        DB 48
        DB 0
        DB 0
        DB 24
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 192
        DB 32
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 7
        DB 4
        DB 36
        DB 36
        DB 63
        DB 36
        DB 0
        DB 0
        DB 248
        DB 8
        DB 136
        DB 136
        DB 8
        DB 8
        DB 0
        DB 0
        DB 25
        DB 33
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 224
        DB 16
        DB 136
        DB 136
        DB 24
        DB 0
        DB 0
        DB 0
        DB 15
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 56
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 28
        DB 34
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 0
        DB 49
        DB 34
        DB 34
        DB 17
        DB 15
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 64
        DB 32
        DB 16
        DB 8
        DB 0
        DB 0
        DB 1
        DB 2
        DB 4
        DB 8
        DB 16
        DB 32
        DB 0
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 0
        DB 0
        DB 8
        DB 16
        DB 32
        DB 64
        DB 128
        DB 0
        DB 0
        DB 0
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 1
        DB 0
        DB 0
        DB 112
        DB 72
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 54
        DB 1
        DB 0
        DB 0
        DB 192
        DB 48
        DB 200
        DB 40
        DB 232
        DB 16
        DB 224
        DB 0
        DB 7
        DB 24
        DB 39
        DB 36
        DB 35
        DB 20
        DB 11
        DB 0
        DB 0
        DB 0
        DB 192
        DB 56
        DB 224
        DB 0
        DB 0
        DB 0
        DB 32
        DB 60
        DB 35
        DB 2
        DB 2
        DB 39
        DB 56
        DB 32
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 32
        DB 16
        DB 8
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 35
        DB 32
        DB 24
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 34
        DB 30
        DB 2
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 33
        DB 63
        DB 32
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 136
        DB 192
        DB 40
        DB 24
        DB 8
        DB 0
        DB 32
        DB 63
        DB 32
        DB 1
        DB 38
        DB 56
        DB 32
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 32
        DB 48
        DB 0
        DB 8
        DB 248
        DB 248
        DB 0
        DB 248
        DB 248
        DB 8
        DB 0
        DB 32
        DB 63
        DB 0
        DB 63
        DB 0
        DB 63
        DB 32
        DB 0
        DB 8
        DB 248
        DB 48
        DB 192
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 32
        DB 0
        DB 7
        DB 24
        DB 63
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 24
        DB 36
        DB 36
        DB 56
        DB 80
        DB 79
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 12
        DB 48
        DB 32
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 56
        DB 32
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 24
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 24
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 8
        DB 120
        DB 136
        DB 0
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 7
        DB 56
        DB 14
        DB 1
        DB 0
        DB 0
        DB 248
        DB 8
        DB 0
        DB 248
        DB 0
        DB 8
        DB 248
        DB 0
        DB 3
        DB 60
        DB 7
        DB 0
        DB 7
        DB 60
        DB 3
        DB 0
        DB 8
        DB 24
        DB 104
        DB 128
        DB 128
        DB 104
        DB 24
        DB 8
        DB 32
        DB 48
        DB 44
        DB 3
        DB 3
        DB 44
        DB 48
        DB 32
        DB 8
        DB 56
        DB 200
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 16
        DB 8
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 32
        DB 56
        DB 38
        DB 33
        DB 32
        DB 32
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 2
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 64
        DB 64
        DB 64
        DB 0
        DB 0
        DB 12
        DB 48
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 6
        DB 56
        DB 192
        DB 0
        DB 0
        DB 2
        DB 2
        DB 2
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 64
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 4
        DB 2
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 25
        DB 36
        DB 34
        DB 34
        DB 34
        DB 63
        DB 32
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 32
        DB 17
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 136
        DB 248
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 34
        DB 34
        DB 34
        DB 34
        DB 19
        DB 0
        DB 0
        DB 128
        DB 128
        DB 240
        DB 136
        DB 136
        DB 136
        DB 24
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 107
        DB 148
        DB 148
        DB 148
        DB 147
        DB 96
        DB 0
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 8
        DB 248
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 36
        DB 2
        DB 45
        DB 48
        DB 32
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 63
        DB 32
        DB 0
        DB 63
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 255
        DB 161
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 160
        DB 255
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 32
        DB 63
        DB 33
        DB 32
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 51
        DB 36
        DB 36
        DB 36
        DB 36
        DB 25
        DB 0
        DB 0
        DB 128
        DB 128
        DB 224
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 1
        DB 14
        DB 48
        DB 8
        DB 6
        DB 1
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 15
        DB 48
        DB 12
        DB 3
        DB 12
        DB 48
        DB 15
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 49
        DB 46
        DB 14
        DB 49
        DB 32
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 129
        DB 142
        DB 112
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 33
        DB 48
        DB 44
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 124
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 2
        DB 124
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 1
        DB 1
        DB 2
        DB 2
        DB 4
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
//   40 {
//   41   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//   42   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1
//   43   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//" 2
//   44   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3
//   45   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4
//   46   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5
//   47   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//& 6
//   48   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//' 7
//   49   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8
//   50   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9
//   51   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10
//   52   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11
//   53   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12
//   54   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13
//   55   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14
//   56   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15
//   57   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16
//   58   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17
//   59   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18
//   60   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19
//   61   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20
//   62   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21
//   63   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22
//   64   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23
//   65   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24
//   66   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25
//   67   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26
//   68   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27
//   69   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//< 28
//   70   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29
//   71   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//> 30
//   72   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31
//   73   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32
//   74   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33
//   75   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34
//   76   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35
//   77   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36
//   78   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37
//   79   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38
//   80   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39
//   81   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40
//   82   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41
//   83   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42
//   84   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43
//   85   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44
//   86   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45
//   87   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46
//   88   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47
//   89   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48
//   90   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49
//   91   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50
//   92   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51
//   93   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52
//   94   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53
//   95   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54
//   96   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55
//   97   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56
//   98   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57
//   99   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58
//  100   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59
//  101   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\ 60
//  102   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61
//  103   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62
//  104   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63
//  105   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64
//  106   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65
//  107   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66
//  108   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67
//  109   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68
//  110   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69
//  111   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70
//  112   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71
//  113   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72
//  114   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73
//  115   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74
//  116   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75
//  117   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76
//  118   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77
//  119   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78
//  120   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79
//  121   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80
//  122   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81
//  123   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82
//  124   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83
//  125   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84
//  126   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85
//  127   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86
//  128   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87
//  129   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88
//  130   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89
//  131   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90
//  132   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{ 91
//  133   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92
//  134   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//} 93
//  135   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94
//  136 };
//  137 
//  138 typedef struct _hz_16_16_
//  139 {
//  140     char* gpk;
//  141     unsigned char code[32];
//  142 }hanziku;
//  143 
//  144 //ºº×Ö×Ö±í

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  145 const hanziku tabel_hanzi[] =
tabel_hanzi:
        DATA16
        DW `?<Constant "  ">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\316\\302">`
        DATA8
        DB 16
        DB 33
        DB 134
        DB 112
        DB 0
        DB 126
        DB 74
        DB 74
        DB 74
        DB 74
        DB 74
        DB 126
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 254
        DB 1
        DB 64
        DB 127
        DB 65
        DB 65
        DB 127
        DB 65
        DB 65
        DB 127
        DB 65
        DB 65
        DB 127
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\266\\310">`
        DATA8
        DB 0
        DB 0
        DB 252
        DB 4
        DB 36
        DB 36
        DB 252
        DB 165
        DB 166
        DB 164
        DB 252
        DB 36
        DB 36
        DB 36
        DB 4
        DB 0
        DB 128
        DB 96
        DB 31
        DB 128
        DB 128
        DB 66
        DB 70
        DB 42
        DB 18
        DB 18
        DB 42
        DB 38
        DB 66
        DB 192
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\243\\272">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 54
        DB 54
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\312\\252">`
        DATA8
        DB 16
        DB 96
        DB 2
        DB 204
        DB 0
        DB 0
        DB 62
        DB 42
        DB 170
        DB 42
        DB 170
        DB 42
        DB 62
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 254
        DB 1
        DB 64
        DB 66
        DB 76
        DB 64
        DB 127
        DB 64
        DB 127
        DB 72
        DB 68
        DB 66
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\271\\342">`
        DATA8
        DB 64
        DB 64
        DB 66
        DB 68
        DB 88
        DB 192
        DB 64
        DB 127
        DB 64
        DB 192
        DB 80
        DB 72
        DB 70
        DB 64
        DB 64
        DB 0
        DB 128
        DB 128
        DB 64
        DB 32
        DB 24
        DB 7
        DB 0
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 64
        DB 64
        DB 120
        DB 0
        DATA16
        DW `?<Constant "\\325\\325">`
        DATA8
        DB 0
        DB 254
        DB 66
        DB 66
        DB 66
        DB 254
        DB 0
        DB 66
        DB 162
        DB 158
        DB 130
        DB 162
        DB 194
        DB 190
        DB 0
        DB 0
        DB 128
        DB 111
        DB 8
        DB 8
        DB 40
        DB 207
        DB 0
        DB 0
        DB 47
        DB 200
        DB 8
        DB 8
        DB 40
        DB 207
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\264\\363">`
        DATA8
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 255
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 0
        DB 128
        DB 128
        DB 64
        DB 32
        DB 16
        DB 12
        DB 3
        DB 0
        DB 3
        DB 12
        DB 16
        DB 32
        DB 64
        DB 128
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\320\\241">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 224
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 32
        DB 64
        DB 128
        DB 0
        DB 0
        DB 8
        DB 4
        DB 3
        DB 0
        DB 0
        DB 64
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 14
        DB 0
        DATA16
        DW `?<Constant "\\323\\332">`
        DATA8
        DB 64
        DB 64
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 254
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 64
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\261\\250">`
        DATA8
        DB 16
        DB 16
        DB 16
        DB 255
        DB 16
        DB 144
        DB 0
        DB 254
        DB 130
        DB 130
        DB 130
        DB 146
        DB 162
        DB 158
        DB 0
        DB 0
        DB 4
        DB 68
        DB 130
        DB 127
        DB 1
        DB 0
        DB 0
        DB 255
        DB 128
        DB 67
        DB 44
        DB 16
        DB 44
        DB 67
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\276\\257">`
        DATA8
        DB 18
        DB 234
        DB 175
        DB 170
        DB 234
        DB 15
        DB 250
        DB 2
        DB 136
        DB 140
        DB 87
        DB 36
        DB 84
        DB 140
        DB 132
        DB 0
        DB 2
        DB 2
        DB 234
        DB 170
        DB 170
        DB 171
        DB 170
        DB 171
        DB 170
        DB 170
        DB 170
        DB 170
        DB 234
        DB 2
        DB 2
        DB 0
//  146 {
//  147     //ÕÒ²»µ½¾ÍÏÔÊ¾Õâ¸ö£¬Á½¸ö¿Õ¸ñ
//  148     {{"  "},
//  149     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  150     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  151 
//  152 
//  153 /*--  ÎÄ×Ö:  ÎÂ  --*/
//  154 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  155     {{"ÎÂ"},
//  156     {0x10,0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,0x00,
//  157     0x02,0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,0x00}},
//  158 
//  159 /*--  ÎÄ×Ö:  ¶È  --*/
//  160 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  161     {{"¶È"},
//  162     {0x00,0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,0x00,
//  163     0x80,0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,0x00}},
//  164 
//  165 /*--  ÎÄ×Ö:  £º  --*/
//  166 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  167     {{"£º"},
//  168     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  169     0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  170 
//  171 /*--  ÎÄ×Ö:  Êª  --*/
//  172 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  173     {{"Êª"},
//  174     {0x10,0x60,0x02,0xCC,0x00,0x00,0x3E,0x2A,0xAA,0x2A,0xAA,0x2A,0x3E,0x00,0x00,0x00,
//  175     0x08,0x08,0xFE,0x01,0x40,0x42,0x4C,0x40,0x7F,0x40,0x7F,0x48,0x44,0x42,0x40,0x00}},
//  176 
//  177     /*--  ÎÄ×Ö:  ¹â  --*/
//  178     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  179     {{"¹â"},
//  180     {0x40,0x40,0x42,0x44,0x58,0xC0,0x40,0x7F,0x40,0xC0,0x50,0x48,0x46,0x40,0x40,0x00,
//  181     0x80,0x80,0x40,0x20,0x18,0x07,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,0x00}},
//  182 
//  183     /*--  ÎÄ×Ö:  ÕÕ  --*/
//  184     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  185     {{"ÕÕ"},
//  186     {0x00,0xFE,0x42,0x42,0x42,0xFE,0x00,0x42,0xA2,0x9E,0x82,0xA2,0xC2,0xBE,0x00,0x00,
//  187     0x80,0x6F,0x08,0x08,0x28,0xCF,0x00,0x00,0x2F,0xC8,0x08,0x08,0x28,0xCF,0x00,0x00}},
//  188 
//  189     /*--  ÎÄ×Ö:  ´ó  --*/
//  190     /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  191     {{"´ó"},
//  192     {0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xFF,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,
//  193     0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00}},
//  194 
//  195     /*--  ÎÄ×Ö:  Ð¡  --*/
//  196     /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  197     {{"Ð¡"},
//  198     {0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x20,0x40,0x80,0x00,0x00,
//  199     0x08,0x04,0x03,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x01,0x0E,0x00}},
//  200 
//  201     /*--  ÎÄ×Ö:  ÓÚ  --*/
//  202     /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  203     {{"ÓÚ"},
//  204     {0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
//  205     0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  206 
//  207     /*--  ÎÄ×Ö:  ±¨  --*/
//  208     /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  209     {{"±¨"},
//  210     {0x10,0x10,0x10,0xFF,0x10,0x90,0x00,0xFE,0x82,0x82,0x82,0x92,0xA2,0x9E,0x00,0x00,
//  211     0x04,0x44,0x82,0x7F,0x01,0x00,0x00,0xFF,0x80,0x43,0x2C,0x10,0x2C,0x43,0x80,0x00}},
//  212 
//  213     /*--  ÎÄ×Ö:  ¾¯  --*/
//  214     /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  215     {{"¾¯"},
//  216     {0x12,0xEA,0xAF,0xAA,0xEA,0x0F,0xFA,0x02,0x88,0x8C,0x57,0x24,0x54,0x8C,0x84,0x00,
//  217     0x02,0x02,0xEA,0xAA,0xAA,0xAB,0xAA,0xAB,0xAA,0xAA,0xAA,0xAA,0xEA,0x02,0x02,0x00}},
//  218 };
//  219 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  220 unsigned char* getChineseCode(char* chinese)
getChineseCode:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function getChineseCode
        CODE
//  221 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  222     int i;
//  223     int tableLen=sizeof(tabel_hanzi)/sizeof(hanziku);
//  224 
//  225     if(chinese==0);
//  226 
//  227     for(i=0; i<tableLen; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  228     {
//  229         if(tabel_hanzi[i].gpk[0]==chinese[0] && tabel_hanzi[i].gpk[1]==chinese[1])
??getChineseCode_0:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x22
        MUL     AB
        MOV     R2,A
        MOV     R6,B
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??getChineseCode_1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x22
        MUL     AB
        MOV     R2,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??getChineseCode_1
//  230         {
//  231             return (unsigned char*)tabel_hanzi[i].code;
        MOV     A,R0
        MOV     B,#0x22
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x22
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(tabel_hanzi + 2) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((tabel_hanzi + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??getChineseCode_2
//  232         }
//  233     }
??getChineseCode_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0xc
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??getChineseCode_0
//  234 
//  235     return (unsigned char*)tabel_hanzi[0].code;
        MOV     R2,#(tabel_hanzi + 2) & 0xff
        MOV     R3,#((tabel_hanzi + 2) >> 8) & 0xff
??getChineseCode_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  236 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function getChineseCode
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function getChineseCode
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+0
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     B,#0x22
        MOV     A,R3
        MUL     AB
        ADD     A,R6
        MOV     R3,A
        MOV     A,#tabel_hanzi & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(tabel_hanzi >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
//  237 
//  238 
//  239 #if (HAL_LCD == TRUE)
//  240 void HalLcd_HW_Init(void);
//  241 void HalLcd_HW_WaitUs(uint16 i);
//  242 void HalLcd_HW_Clear(void);
//  243 void HalLcd_HW_Control(uint8 cmd);
//  244 void HalLcd_HW_Write(uint8 data);
//  245 void HalLcd_HW_SetContrast(uint8 value);
//  246 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
//  247 void HalLcd_HW_WriteLine(uint8 line, const char *pText);
//  248 
//  249 void DelayMS(unsigned int msec);
//  250 void LCD_DLY_ms(unsigned int ms);
//  251 void LCD_WrDat(unsigned char dat);
//  252 void LCD_WrCmd(unsigned char cmd);
//  253 void LCD_Set_Pos(unsigned char x, unsigned char y);
//  254 void LCD_Fill(unsigned char bmp_dat) ;
//  255 void LCD_CLS(void);
//  256 void LcdClearLine(unsigned char y, unsigned char count);
//  257 
//  258 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
//  259 void HalLcdDisplayPercentBar( char *title, uint8 value );
//  260 void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N);
//  261 #endif //LCD
//  262 
//  263 
//  264 /**************************************************************************************************
//  265  * @fn      HalLcdInit
//  266  *
//  267  * @brief   Initilize LCD Service
//  268  *
//  269  * @param   init - pointer to void that contains the initialized value
//  270  *
//  271  * @return  None
//  272  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  273 void HalLcdInit(void)
HalLcdInit:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalLcdInit
        CODE
//  274 {
        FUNCALL HalLcdInit, HalLcd_HW_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  275 #if (HAL_LCD == TRUE)
//  276   HalLcd_HW_Init();
        ; Setup parameters for call to function HalLcd_HW_Init
        LCALL   ??HalLcd_HW_Init?relay
          CFI EndBlock cfiBlock4
//  277 #endif
//  278 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  279 
//  280 /**************************************************************************************************
//  281  * @fn      HalLcdWriteValue
//  282  *
//  283  * @brief   Write a value to the LCD
//  284  *
//  285  * @param   value  - value that will be displayed
//  286  *          radix  - 8, 10, 16
//  287  *          option - display options
//  288  *
//  289  * @return  None
//  290  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function HalLcdWriteValue
        CODE
//  292 {
        FUNCALL HalLcdWriteValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
//  293 #if (HAL_LCD == TRUE)
//  294   uint8 buf[LCD_MAX_BUF];
//  295 
//  296   _ltoa( value, &buf[0], radix );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
//  297   HalLcdWriteString( (char*)buf, option );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     A,R6
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  298 #endif
//  299 }
        MOV     A,#0x19
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock7
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  300 
//  301 /**************************************************************************************************
//  302  * @fn      HalLcdWriteScreen
//  303  *
//  304  * @brief   Write a value to the LCD
//  305  *
//  306  * @param   line1  - string that will be displayed on line 1
//  307  *          line2  - string that will be displayed on line 2
//  308  *
//  309  * @return  None
//  310  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function HalLcdWriteScreen
        CODE
//  312 {
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  313 #if (HAL_LCD == TRUE)
//  314   HalLcdWriteString( line1, 1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteString?relay
//  315   HalLcdWriteString( line2, 2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??HalLcdWriteString?relay
//  316 #endif
//  317 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock9
//  318 
//  319 /**************************************************************************************************
//  320  * @fn      HalLcdWriteStringValue
//  321  *
//  322  * @brief   Write a string followed by a value to the LCD
//  323  *
//  324  * @param   title  - Title that will be displayed before the value
//  325  *          value  - value
//  326  *          format - redix
//  327  *          line   - line number
//  328  *
//  329  * @return  None
//  330  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  331 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function HalLcdWriteStringValue
        CODE
//  332 {
        FUNCALL HalLcdWriteStringValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 0,R1
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  333 #if (HAL_LCD == TRUE)
//  334   uint8 tmpLen;
//  335   uint8 buf[LCD_MAX_BUF];
//  336   uint32 err;
//  337 
//  338   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 8,A
//  339   osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 4,R2
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
//  340   //buf[tmpLen] = ' ';
//  341   err = (uint32)(value);
//  342   _ltoa( err, &buf[tmpLen], format );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     ?V0 + 4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R1,?V0 + 0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
//  343   HalLcdWriteString( (char*)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  344 #endif
//  345 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  346 
//  347 /**************************************************************************************************
//  348  * @fn      HalLcdWriteStringValue
//  349  *
//  350  * @brief   Write a string followed by a value to the LCD
//  351  *
//  352  * @param   title   - Title that will be displayed before the value
//  353  *          value1  - value #1
//  354  *          format1 - redix of value #1
//  355  *          value2  - value #2
//  356  *          format2 - redix of value #2
//  357  *          line    - line number
//  358  *
//  359  * @return  None
//  360  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  361 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function HalLcdWriteStringValueValue
        CODE
//  362                                   uint16 value2, uint8 format2, uint8 line )
//  363 {
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 5,R1
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  364 
//  365 #if (HAL_LCD == TRUE)
//  366 
//  367   uint8 tmpLen;
//  368   uint8 buf[LCD_MAX_BUF];
//  369   uint32 err;
//  370 
//  371   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
//  372   if ( tmpLen )
        JZ      ??HalLcdWriteStringValueValue_0
//  373   {
//  374     osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 8,R2
        MOV     R4,?V0 + 8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  375     //buf[tmpLen++] = ' ';
//  376   }
//  377 
//  378   err = (uint32)(value1);
//  379   _ltoa( err, &buf[tmpLen], format1 );
??HalLcdWriteStringValueValue_0:
        ; Setup parameters for call to function _ltoa
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     ?V0 + 8,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 5
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  380   tmpLen = (uint8)osal_strlen( (char*)buf );
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
//  381 
//  382   buf[tmpLen++] = ',';
        MOV     ?V0 + 2,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     ?V0 + 6
//  383   buf[tmpLen++] = ' ';
        MOV     ?V0 + 2,?V0 + 6
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x20
        MOVX    @DPTR,A
//  384   err = (uint32)(value2);
//  385   _ltoa( err, &buf[tmpLen], format2 );
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x1
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 4
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  386 
//  387   HalLcdWriteString( (char *)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  388 
//  389 #endif
//  390 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function HalLcdWriteStringValueValue
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function HalLcdWriteStringValueValue
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  391 
//  392 #if (HAL_LCD == TRUE)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  393 void DelayMS(unsigned int msec)
DelayMS:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function DelayMS
        CODE
//  394 { 
        ; Saved register size: 0
        ; Auto size: 0
//  395     unsigned int i,j;
//  396     
//  397     for (i=0; i<msec; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??DelayMS_0
//  398         for (j=0; j<530; j++);
??DelayMS_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??DelayMS_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??DelayMS_1
//  399 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock15
//  400 
//  401 /*********************LCD ÑÓÊ±1ms************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  402 void LCD_DLY_ms(unsigned int ms)
LCD_DLY_ms:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function LCD_DLY_ms
        CODE
//  403 {                         
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??LCD_DLY_ms_0
//  404     unsigned int a;
//  405     while(ms)
//  406     {
//  407         a=1800;
??LCD_DLY_ms_1:
        MOV     R0,#0x8
        MOV     R1,#0x7
//  408         while(a--);
??LCD_DLY_ms_2:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??LCD_DLY_ms_2
//  409         ms--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//  410     }
??LCD_DLY_ms_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??LCD_DLY_ms_1
//  411     return;
        LJMP    ?BRET
          CFI EndBlock cfiBlock16
//  412 }
//  413 
//  414 /*********************LCDÐ´Êý¾Ý************************************/ 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void LCD_WrDat(unsigned char dat)     
LCD_WrDat:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function LCD_WrDat
        CODE
//  416 {
        ; Saved register size: 0
        ; Auto size: 0
//  417     unsigned char i=8, temp=0;
//  418     LCD_DC=1;  
        SETB    0x80.0
//  419     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  420     {
//  421         LCD_SCL=0;  
??LCD_WrDat_0:
        CLR     0x90.2
//  422         
//  423         temp = dat&0x80;
//  424         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??LCD_WrDat_1
//  425         {
//  426             LCD_SDA = 0;
        CLR     0x90.3
        SJMP    ??LCD_WrDat_2
//  427         }
//  428         else
//  429         {
//  430             LCD_SDA = 1;
??LCD_WrDat_1:
        SETB    0x90.3
//  431         }
//  432         LCD_SCL=1;             
??LCD_WrDat_2:
        SETB    0x90.2
//  433         dat<<=1;    
        CLR     C
        RLC     A
        MOV     R1,A
//  434     }
        DEC     R0
        MOV     A,R0
        JNZ     ??LCD_WrDat_0
//  435 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock17
        REQUIRE _A_P0
        REQUIRE _A_P1
//  436 
//  437 /*********************LCDÐ´ÃüÁî************************************/                                        

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  438 void LCD_WrCmd(unsigned char cmd)
LCD_WrCmd:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function LCD_WrCmd
        CODE
//  439 {
        ; Saved register size: 0
        ; Auto size: 0
//  440     unsigned char i=8, temp=0;
//  441     LCD_DC=0;
        CLR     0x80.0
//  442     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  443     { 
//  444         LCD_SCL=0; 
??LCD_WrCmd_0:
        CLR     0x90.2
//  445        
//  446         temp = cmd&0x80;
//  447         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??LCD_WrCmd_1
//  448         {
//  449             LCD_SDA = 0;
        CLR     0x90.3
        SJMP    ??LCD_WrCmd_2
//  450         }
//  451         else
//  452         {
//  453             LCD_SDA = 1;
??LCD_WrCmd_1:
        SETB    0x90.3
//  454         }
//  455         LCD_SCL=1;
??LCD_WrCmd_2:
        SETB    0x90.2
//  456         cmd<<=1;;        
        CLR     C
        RLC     A
        MOV     R1,A
//  457     }     
        DEC     R0
        MOV     A,R0
        JNZ     ??LCD_WrCmd_0
//  458 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock18
        REQUIRE _A_P0
        REQUIRE _A_P1
//  459 
//  460 /*********************LCD ÉèÖÃ×ø±ê************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  461 void LCD_Set_Pos(unsigned char x, unsigned char y) 
LCD_Set_Pos:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function LCD_Set_Pos
        CODE
//  462 {
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  463     if(x>127) return;
        MOV     A,R6
        CLR     C
        SUBB    A,#-0x80
        JNC     ??LCD_Set_Pos_0
//  464     if(y>7) return;
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JNC     ??LCD_Set_Pos_0
//  465 
//  466     LCD_WrCmd(0xb0+y);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  467     LCD_WrCmd(((x&0xf0)>>4)|0x10);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  468     LCD_WrCmd((x&0x0f)|0x01); 
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0x1
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
          CFI EndBlock cfiBlock19
//  469 } 
??LCD_Set_Pos_0:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
//  470 
//  471 /*********************LCDÈ«ÆÁ************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  472 void LCD_Fill(unsigned char bmp_dat) 
LCD_Fill:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function LCD_Fill
        CODE
//  473 {
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  474     unsigned char y,x;
//  475     for(y=0;y<8;y++)
        MOV     ?V0 + 0,#0x0
//  476     {
//  477         LCD_WrCmd(0xb0+y);
??LCD_Fill_0:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,?V0 + 0
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  478         LCD_WrCmd(0x01);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x1
        LCALL   ??LCD_WrCmd?relay
//  479         LCD_WrCmd(0x10);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x10
        LCALL   ??LCD_WrCmd?relay
//  480         for(x=0;x<X_WIDTH;x++)
        MOV     R7,#-0x80
//  481             LCD_WrDat(bmp_dat);
??LCD_Fill_1:
        ; Setup parameters for call to function LCD_WrDat
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
        DEC     R7
        MOV     A,R7
        JNZ     ??LCD_Fill_1
//  482     }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_Fill_0
//  483 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock21
//  484 
//  485 /*********************LCD¸´Î»************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 void LCD_CLS(void)
LCD_CLS:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function LCD_CLS
        CODE
//  487 {
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  488     unsigned char y,x;    
//  489     for(y=0;y<8;y++)
        MOV     R7,#0x0
//  490     {
//  491         LCD_WrCmd(0xb0+y);
??LCD_CLS_0:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  492         LCD_WrCmd(0x01);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x1
        LCALL   ??LCD_WrCmd?relay
//  493         LCD_WrCmd(0x10); 
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x10
        LCALL   ??LCD_WrCmd?relay
//  494         for(x=0;x<X_WIDTH;x++)
        MOV     R6,#-0x80
//  495             LCD_WrDat(0);
??LCD_CLS_1:
        ; Setup parameters for call to function LCD_WrDat
        MOV     R1,#0x0
        LCALL   ??LCD_WrDat?relay
        DEC     R6
        MOV     A,R6
        JNZ     ??LCD_CLS_1
//  496     }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_CLS_0
//  497 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock22
//  498 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  499 void LcdClearLine(unsigned char y, unsigned char count)
LcdClearLine:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function LcdClearLine
        CODE
//  500 {
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 7,R2
//  501     unsigned char x,j;	
//  502     
//  503     for(j=y; j<(y+count); j++)
        MOV     R6,?V0 + 6
        SJMP    ??LcdClearLine_0
//  504     {
//  505         LCD_WrCmd(0xb0+j);
??LcdClearLine_1:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R6
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  506         LCD_WrCmd(0x01);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x1
        LCALL   ??LCD_WrCmd?relay
//  507         LCD_WrCmd(0x10); 
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x10
        LCALL   ??LCD_WrCmd?relay
//  508         for(x=0;x<X_WIDTH;x++)
        MOV     R7,#-0x80
//  509            LCD_WrDat(0);
??LcdClearLine_2:
        ; Setup parameters for call to function LCD_WrDat
        MOV     R1,#0x0
        LCALL   ??LCD_WrDat?relay
        DEC     R7
        MOV     A,R7
        JNZ     ??LcdClearLine_2
//  510     }
        INC     R6
??LcdClearLine_0:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 2,?V0 + 7
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,?V0 + 0
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??LcdClearLine_1
//  511 }
        LJMP    ??Subroutine7_0 & 0xFFFF
          CFI EndBlock cfiBlock23
//  512 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  513 void HalLcdWriteString (char *str, uint8 option)
HalLcdWriteString:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function HalLcdWriteString
        CODE
//  514 {
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LcdClearLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 4,R1
//  515   uint8 x=0,y=0,strLen;
//  516   uint8 lcdBuf[HAL_LCD_MAX_CHARS+1];
//  517     
//  518   x=0;
//  519   y = (option-1)*2;
        MOV     A,#-0x1
        ADD     A,?V0 + 4
        CLR     C
        RLC     A
        MOV     ?V0 + 3,A
//  520   strLen = (uint8)osal_strlen( (char*)str );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
//  521 
//  522   /* Check boundries */
//  523   if ( strLen > HAL_LCD_MAX_CHARS )
        CLR     C
        SUBB    A,#0x11
        JC      ??HalLcdWriteString_0
//  524     strLen = HAL_LCD_MAX_CHARS;
        MOV     ?V0 + 6,#0x10
//  525 
//  526   osal_memset(lcdBuf, 0, HAL_LCD_MAX_CHARS+1);
??HalLcdWriteString_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  527   osal_memcpy( lcdBuf, str, strLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
//  528   
//  529   LcdClearLine(y, 2);
        ; Setup parameters for call to function LcdClearLine
        MOV     R2,#0x2
        MOV     R1,?V0 + 3
        LCALL   ??LcdClearLine?relay
//  530   LCD_P8x16Str(x, y, lcdBuf);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
//  531 }
        MOV     A,#0x11
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock24
//  532 
//  533 #if 1
//  534 /***ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7***/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  535 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
LCD_P8x16Str:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function LCD_P8x16Str
        CODE
//  536 {
        FUNCALL LCD_P8x16Str, getChineseCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  537     unsigned char c=0,i=0,j=0;
        MOV     ?V0 + 4,#0x0
//  538     unsigned char* addr=0;
//  539     unsigned char wm=0;
        SJMP    ??LCD_P8x16Str_0
//  540 
//  541     while (ch[j]!='\0')
//  542     {    
//  543         if(x>120){
//  544             x=0;
//  545             y++;
//  546         }
//  547         
//  548         LCD_Set_Pos(x,y); 
//  549         if(IS_CHINESE(ch[j]))
//  550         {
//  551             //ÖÐÎÄÏÔÊ¾
//  552             addr=getChineseCode(&ch[j]);
??LCD_P8x16Str_1:
        ; Setup parameters for call to function getChineseCode
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??getChineseCode?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  553 
//  554             for(wm = 0;wm < 16;wm++)               
        MOV     ?V0 + 5,#0x0
//  555             {
//  556                 LCD_WrDat(addr[wm]);    
??LCD_P8x16Str_2:
        ; Setup parameters for call to function LCD_WrDat
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,?V0 + 2
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
//  557             }      
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x10
        JC      ??LCD_P8x16Str_2
//  558 
//  559             LCD_Set_Pos(x,y + 1); 
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R2,A
        MOV     R1,?V0 + 0
        LCALL   ??LCD_Set_Pos?relay
//  560             for(wm = 0;wm < 16;wm++)          
        MOV     ?V0 + 5,#0x0
//  561             {
//  562                 LCD_WrDat(addr[16+wm]);
??LCD_P8x16Str_3:
        ; Setup parameters for call to function LCD_WrDat
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,?V0 + 2
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
//  563             }
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x10
        JC      ??LCD_P8x16Str_3
//  564             
//  565             x+=16;
        MOV     A,#0x10
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
//  566             j+=2;
        INC     ?V0 + 4
??LCD_P8x16Str_4:
        INC     ?V0 + 4
//  567         }
??LCD_P8x16Str_0:
        MOV     ?V0 + 2,?V0 + 4
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     $+5
        LJMP    ??LCD_P8x16Str_5 & 0xFFFF
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x79
        JC      ??LCD_P8x16Str_6
        MOV     ?V0 + 0,#0x0
        INC     ?V0 + 1
??LCD_P8x16Str_6:
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,?V0 + 1
        MOV     R1,?V0 + 0
        LCALL   ??LCD_Set_Pos?relay
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        CLR     C
        SUBB    A,#-0x80
        JC      $+5
        LJMP    ??LCD_P8x16Str_1 & 0xFFFF
//  568         else
//  569         {
//  570             //Ó¢ÎÄÏÔÊ¾
//  571             c =ch[j]-32;
        MOVX    A,@DPTR
        ADD     A,#-0x20
        MOV     ?V0 + 8,A
//  572 
//  573             for(i=0;i<8;i++)
        MOV     ?V0 + 5,#0x0
//  574             {
//  575                 LCD_WrDat(F8X16[c*16+i]);
??LCD_P8x16Str_7:
        ; Setup parameters for call to function LCD_WrDat
        MOV     ?V0 + 6,?V0 + 8
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        LCALL   ?Subroutine6 & 0xFFFF
//  576             }
??CrossCallReturnLabel_6:
        MOV     A,#F8X16 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(F8X16 >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_P8x16Str_7
//  577 
//  578             LCD_Set_Pos(x,y+1);    
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R2,A
        MOV     R1,?V0 + 0
        LCALL   ??LCD_Set_Pos?relay
//  579             for(i=0;i<8;i++)
        MOV     ?V0 + 5,#0x0
//  580             {
//  581                 LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_8:
        ; Setup parameters for call to function LCD_WrDat
        MOV     ?V0 + 6,?V0 + 8
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        LCALL   ?Subroutine6 & 0xFFFF
//  582             }
??CrossCallReturnLabel_7:
        MOV     A,#(F8X16 + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((F8X16 + 8) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_P8x16Str_8
//  583 
//  584             x+=8;
        MOV     A,#0x8
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
//  585             j++;
        LJMP    ??LCD_P8x16Str_4 & 0xFFFF
//  586         }
//  587     }
//  588 }
??LCD_P8x16Str_5:
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function LCD_P8x16Str
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function LCD_P8x16Str
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     ?V0 + 2,?V0 + 5
        MOV     A,?V0 + 6
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function LCD_P8x16Str
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function LCD_P8x16Str
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  589 #else
//  590 /***ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7***/
//  591 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
//  592 {
//  593     unsigned char c=0,i=0,j=0;
//  594     
//  595     while (ch[j]!='\0')
//  596     {    
//  597         c =ch[j]-32;
//  598         if(x>120){
//  599           x=0;
//  600           y++;
//  601         }
//  602         LCD_Set_Pos(x,y);    
//  603         for(i=0;i<8;i++)     
//  604             LCD_WrDat(F8X16[c*16+i]);
//  605         LCD_Set_Pos(x,y+1);    
//  606         for(i=0;i<8;i++)     
//  607             LCD_WrDat(F8X16[c*16+i+8]);  
//  608         x+=8;
//  609         j++;
//  610     }
//  611 }
//  612 
//  613 /*****************¹¦ÄÜÃèÊö£ºÏÔÊ¾16*16µãÕó  ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************************/
//  614 void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N)
//  615 {
//  616     unsigned char wm=0;
//  617     unsigned int adder=2*N;//32*N;        
//  618     LCD_Set_Pos(x , y);
//  619     for(wm = 0;wm < 16;wm++)               
//  620     {
//  621         LCD_WrDat(F16x16[adder]);    
//  622         adder += 1;
//  623     }      
//  624     LCD_Set_Pos(x,y + 1); 
//  625     for(wm = 0;wm < 16;wm++)          
//  626     {
//  627         LCD_WrDat(F16x16[adder]);
//  628         adder += 1;
//  629     }           
//  630 }
//  631 #endif
//  632 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  633 void HalLcd_HW_WaitUs(uint16 microSecs)
HalLcd_HW_WaitUs:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function HalLcd_HW_WaitUs
        CODE
//  634 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??HalLcd_HW_WaitUs_0
//  635   while(microSecs--)
//  636   {
//  637     /* 32 NOPs == 1 usecs */
//  638     asm("nop"); asm("nop"); asm("nop"); asm("nop");
??HalLcd_HW_WaitUs_1:
        nop
        nop
        nop
        nop
//  639     asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
//  640   }
??HalLcd_HW_WaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalLcd_HW_WaitUs_1
//  641 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock32
//  642 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  643 void HalLcd_HW_Init(void)
HalLcd_HW_Init:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function HalLcd_HW_Init
        CODE
//  644 {
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_Fill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_Set_Pos
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  645     P0SEL &= 0xFE; //ÈÃP0.0ÎªÆÕÍ¨IO¿Ú£¬
        ANL     0xf3,#0xfe
//  646     P0DIR |= 0x01; //ÈÃP0.0ÎªÎªÊä³ö
        ORL     0xfd,#0x1
//  647 
//  648     P1SEL &= 0x73; //ÈÃ P1.2 P1.3 P1.7ÎªÆÕÍ¨IO¿Ú
        ANL     0xf4,#0x73
//  649     P1DIR |= 0x8C; //°Ñ P1.2 P1.3 1.7ÉèÖÃÎªÊä³ö
        ORL     0xfe,#0x8c
//  650     
//  651     LCD_SCL=1;
        SETB    0x90.2
//  652     LCD_RST=0;
        CLR     0x90.7
//  653     LCD_DLY_ms(50);
        ; Setup parameters for call to function LCD_DLY_ms
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   ??LCD_DLY_ms?relay
//  654     LCD_RST=1;      //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï   
        SETB    0x90.7
//  655     LCD_WrCmd(0xae);//--turn off oled panel
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x52
        LCALL   ??LCD_WrCmd?relay
//  656     LCD_WrCmd(0x00);//---set low column address
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x0
        LCALL   ??LCD_WrCmd?relay
//  657     LCD_WrCmd(0x10);//---set high column address
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x10
        LCALL   ??LCD_WrCmd?relay
//  658     LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x40
        LCALL   ??LCD_WrCmd?relay
//  659     LCD_WrCmd(0x81);//--set contrast control register
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x7f
        LCALL   ??LCD_WrCmd?relay
//  660     LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x31
        LCALL   ??LCD_WrCmd?relay
//  661     LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×óÓÒ·´ÖÃ 0xa1Õý³£
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5f
        LCALL   ??LCD_WrCmd?relay
//  662     LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÉÏÏÂ·´ÖÃ 0xc8Õý³£
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x38
        LCALL   ??LCD_WrCmd?relay
//  663     LCD_WrCmd(0xa6);//--set normal display
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5a
        LCALL   ??LCD_WrCmd?relay
//  664     LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x58
        LCALL   ??LCD_WrCmd?relay
//  665     LCD_WrCmd(0x3f);//--1/64 duty
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x3f
        LCALL   ??LCD_WrCmd?relay
//  666     LCD_WrCmd(0xd3);//-set display offset    Shift Mapping RAM Counter (0x00~0x3F)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x2d
        LCALL   ??LCD_WrCmd?relay
//  667     LCD_WrCmd(0x00);//-not offset
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x0
        LCALL   ??LCD_WrCmd?relay
//  668     LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x2b
        LCALL   ??LCD_WrCmd?relay
//  669     LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x80
        LCALL   ??LCD_WrCmd?relay
//  670     LCD_WrCmd(0xd9);//--set pre-charge period
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x27
        LCALL   ??LCD_WrCmd?relay
//  671     LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0xf
        LCALL   ??LCD_WrCmd?relay
//  672     LCD_WrCmd(0xda);//--set com pins hardware configuration
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x26
        LCALL   ??LCD_WrCmd?relay
//  673     LCD_WrCmd(0x12);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x12
        LCALL   ??LCD_WrCmd?relay
//  674     LCD_WrCmd(0xdb);//--set vcomh
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x25
        LCALL   ??LCD_WrCmd?relay
//  675     LCD_WrCmd(0x40);//Set VCOM Deselect Level
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x40
        LCALL   ??LCD_WrCmd?relay
//  676     LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x20
        LCALL   ??LCD_WrCmd?relay
//  677     LCD_WrCmd(0x02);//
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x2
        LCALL   ??LCD_WrCmd?relay
//  678     LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x73
        LCALL   ??LCD_WrCmd?relay
//  679     LCD_WrCmd(0x14);//--set(0x10) disable
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x14
        LCALL   ??LCD_WrCmd?relay
//  680     LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5c
        LCALL   ??LCD_WrCmd?relay
//  681     LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5a
        LCALL   ??LCD_WrCmd?relay
//  682     LCD_WrCmd(0xaf);//--turn on oled panel
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x51
        LCALL   ??LCD_WrCmd?relay
//  683     LCD_Fill(0x00);  //³õÊ¼ÇåÆÁ 
        ; Setup parameters for call to function LCD_Fill
        MOV     R1,#0x0
        LCALL   ??LCD_Fill?relay
//  684     LCD_Set_Pos(0,0); 
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??LCD_Set_Pos?relay
//  685 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock33
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getChineseCode?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getChineseCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DelayMS?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    DelayMS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DLY_ms?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_DLY_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WrDat?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_WrDat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WrCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_WrCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Set_Pos?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_Set_Pos

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Fill?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_Fill

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_CLS?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_CLS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LcdClearLine?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LcdClearLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_P8x16Str?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    LCD_P8x16Str

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WaitUs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_WaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_Init

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "  ">`:
        DB "  "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\316\\302">`:
        DB "\316\302"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\266\\310">`:
        DB "\266\310"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\243\\272">`:
        DB "\243\272"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\312\\252">`:
        DB "\312\252"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\271\\342">`:
        DB "\271\342"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\325\\325">`:
        DB "\325\325"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\264\\363">`:
        DB "\264\363"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\320\\241">`:
        DB "\320\241"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\323\\332">`:
        DB "\323\332"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\261\\250">`:
        DB "\261\250"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\276\\257">`:
        DB "\276\257"

        END
//  686 
//  687 #endif
//  688 #endif
// 
// 1 618 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
// 1 964 bytes in segment XDATA_ROM_C
// 
// 1 726 bytes of CODE  memory
// 1 964 bytes of CONST memory
//     0 bytes of DATA  memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: 1
