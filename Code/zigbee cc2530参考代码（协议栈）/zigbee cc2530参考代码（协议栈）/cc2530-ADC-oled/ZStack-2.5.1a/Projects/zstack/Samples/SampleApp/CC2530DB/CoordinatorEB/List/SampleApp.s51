///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Jun/2019  15:19:22 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Code /
//                          \zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZS /
//                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\Sou /
//                          rce\SampleApp.c                                   /
//    Command line       =  -f "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\ /
//                          Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1 /
//                          a\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"   /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\ /
//                          Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1 /
//                          a\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"  /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µê /
//                          ÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Code\zigbee                   /
//                          cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\Source\Samp /
//                          leApp.c" -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC  /
//                          -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC        /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB\List\" -lA                   /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB\List\" --diag_suppress       /
//                          Pe001,Pa010 -o "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\P /
//                          H´«¸ÐÆ÷Ä£¿é\Code\zigbee                           /
//                          cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\Obj\" -e --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´« /
//                          ¸ÐÆ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZSt /
//                          ack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\Source\" -I                 /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\ZMain\TI2530DB\" -I               /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\hal\include\"    /
//                          -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\ /
//                          Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1 /
//                          a\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\Components\hal\target\CC /
//                          2530EB\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´« /
//                          ¸ÐÆ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZSt /
//                          ack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ /
//                          include\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´ /
//                          «¸ÐÆ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZS /
//                          tack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac /
//                          \high_level\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ· /
//                          \PH´«¸ÐÆ÷Ä£¿é\Code\zigbee                         /
//                          cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\" -I  /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\single_chip\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ /
//                          ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Code\zigbee                     /
//                          cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mt\" -I                   /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\osal\include\"   /
//                          -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\ /
//                          Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1 /
//                          a\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\Components\services\sadd /
//                          r\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä /
//                          £¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2 /
//                          .5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\Components\services\ /
//                          sdata\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ /
//                          ÐÆ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZSta /
//                          ck-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \af\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ /
//                          ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack /
//                          -2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷ /
//                          Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack- /
//                          2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\Components\stack\sa /
//                          pi\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷ /
//                          Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack- /
//                          2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\Components\stack\se /
//                          c\" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä /
//                          £¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2 /
//                          .5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\Components\stack\sys /
//                          \" -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£ /
//                          ¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2. /
//                          5.1a\ZStack-2.5.1a\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\zdo\ /
//                          " -I "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿ /
//                          é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5 /
//                          .1a\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\zmac\" -I   /
//                          "E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Cod /
//                          e\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz  /
//    List file          =  E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Code /
//                          \zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZS /
//                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\CoordinatorEB\List\SampleApp.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GetPH?relay
        FUNCTION ??GetPH?relay,0203H
        PUBLIC ??SampleApp_CallBack?relay
        FUNCTION ??SampleApp_CallBack?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        FUNCTION ??SampleApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBLIC GetPH
        FUNCTION GetPH,021201H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC SampleApp_CallBack
        FUNCTION SampleApp_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION SampleApp_ProcessMSGCmd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_41600001
        PUBWEAK __Constant_41853b64
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_457ff000
        PUBWEAK __Constant_c0b82196
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalAdcRead          SYMBOL "HalAdcRead"
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
ReadDs18B20         SYMBOL "ReadDs18B20"
??ReadDs18B20?relay SYMBOL "?relay", ReadDs18B20
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_rand           SYMBOL "osal_rand"
??osal_rand?relay   SYMBOL "?relay", osal_rand
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen
GetPH               SYMBOL "GetPH"
??GetPH?relay       SYMBOL "?relay", GetPH
SampleApp_CallBack  SYMBOL "SampleApp_CallBack"
??SampleApp_CallBack?relay SYMBOL "?relay", SampleApp_CallBack
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??ReadDs18B20?relay
        FUNCTION ??ReadDs18B20?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ReadDs18B20
        FUNCTION ReadDs18B20,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\ÌÔ±¦µêÆÌ\¹èÐ¾µç×Ó\2.µêÆÌ²úÆ·\PH´«¸ÐÆ÷Ä£¿é\Code\zigbee cc2530²Î¿¼´úÂë£¨Ð­ÒéÕ»£©\ZStack-2.5.1a\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 
//    5 #include <stdio.h>
//    6 #include <string.h>
//    7 #include "AF.h"
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    9 #include "OSAL_Tasks.h"
//   10 #include "SampleApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18   #include "hal_lcd.h"
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 #include "hal_adc.h"
//   23 #include "ds18b20.h"
//   24 
//   25 
//   26 /*********************************************************************
//   27  * MACROS
//   28  */
//   29 
//   30 /*********************************************************************
//   31  * CONSTANTS
//   32  */
//   33 
//   34 #if !defined( SAMPLE_APP_PORT )
//   35 #define SAMPLE_APP_PORT  0
//   36 #endif
//   37 
//   38 #if !defined( SAMPLE_APP_BAUD )
//   39   #define SAMPLE_APP_BAUD  HAL_UART_BR_115200
//   40 #endif
//   41 
//   42 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   43 #if !defined( SAMPLE_APP_THRESH )
//   44 #define SAMPLE_APP_THRESH  64
//   45 #endif
//   46 
//   47 #if !defined( SAMPLE_APP_RX_SZ )
//   48 #define SAMPLE_APP_RX_SZ  128
//   49 #endif
//   50 
//   51 #if !defined( SAMPLE_APP_TX_SZ )
//   52 #define SAMPLE_APP_TX_SZ  128
//   53 #endif
//   54 
//   55 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   56 #if !defined( SAMPLE_APP_IDLE )
//   57 #define SAMPLE_APP_IDLE  6
//   58 #endif
//   59 
//   60 // Loopback Rx bytes to Tx for throughput testing.
//   61 #if !defined( SAMPLE_APP_LOOPBACK )
//   62 #define SAMPLE_APP_LOOPBACK  FALSE
//   63 #endif
//   64 
//   65 // This is the max byte count per OTA message.
//   66 #if !defined( SAMPLE_APP_TX_MAX )
//   67 #define SAMPLE_APP_TX_MAX  80
//   68 #endif
//   69 
//   70 #define SAMPLE_APP_RSP_CNT  4
//   71 
//   72 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   73 const cId_t SampleApp_ClusterList[SAMPLE_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   74 {
//   75   SAMPLEAPP_P2P_CLUSTERID,
//   76   SAMPLEAPP_PERIODIC_CLUSTERID,
//   77 };
//   78 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   79 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   80 {
//   81   SAMPLEAPP_ENDPOINT,              //  int   Endpoint;
//   82   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   83   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   84   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   85   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   86   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   87   (cId_t *)SampleApp_ClusterList,  //  byte *pAppInClusterList;
//   88   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//   89   (cId_t *)SampleApp_ClusterList   //  byte *pAppOutClusterList;
//   90 };
//   91 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 endPointDesc_t SampleApp_epDesc =
SampleApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for SampleApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//   93 {
//   94   SAMPLEAPP_ENDPOINT,
//   95  &SampleApp_TaskID,
//   96   (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
//   97   noLatencyReqs
//   98 };
//   99 
//  100 /*********************************************************************
//  101  * TYPEDEFS
//  102  */
//  103 
//  104 /*********************************************************************
//  105  * GLOBAL VARIABLES
//  106  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  107 devStates_t SampleApp_NwkState;   
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 uint8 SampleApp_TaskID;           // Task ID for internal task/event processing.
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 
//  110 /*********************************************************************
//  111  * EXTERNAL VARIABLES
//  112  */
//  113 
//  114 /*********************************************************************
//  115  * EXTERNAL FUNCTIONS
//  116  */
//  117 
//  118 /*********************************************************************
//  119  * LOCAL VARIABLES
//  120  */
//  121 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 static uint8 SampleApp_MsgID;
SampleApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  123 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  124 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  126 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  127 
//  128 
//  129 static afAddrType_t SampleApp_TxAddr;
//  130 static uint8 SampleApp_TxSeq;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];
SampleApp_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 static uint8 SampleApp_TxLen;
SampleApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 static afAddrType_t SampleApp_RxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 static uint8 SampleApp_RxSeq;
SampleApp_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
//  137 
//  138 /*********************************************************************
//  139  * LOCAL FUNCTIONS
//  140  */
//  141 
//  142 static void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  143 void SampleApp_CallBack(uint8 port, uint8 event); 
//  144 static void SampleApp_Send_P2P_Message( void );
//  145 
//  146 
//  147 /*********************************************************************
//  148  * @fn      SampleApp_Init
//  149  *
//  150  * @brief   This is called during OSAL tasks' initialization.
//  151  *
//  152  * @param   task_id - the Task ID assigned by OSAL.
//  153  *
//  154  * @return  none
//  155  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SampleApp_Init
        CODE
//  157 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  158   halUARTCfg_t uartConfig;
//  159 
//  160   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  161   SampleApp_RxSeq = 0xC3;
        MOV     DPTR,#SampleApp_RxSeq
        MOV     A,#-0x3d
        MOVX    @DPTR,A
//  162   SampleApp_NwkState = DEV_INIT;       
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  163 
//  164   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  165   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     ?V0 + 0,R6
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??MT_UartRegisterTaskID?relay
//  166   afRegister( (endPointDesc_t *)&SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  167   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  168 
//  169 #ifdef ZDO_COORDINATOR
//  170   //Ð­µ÷Æ÷³õÊ¼»¯
//  171   
//  172   //·ê·äÃùÆ÷³õÊ¼»¯
//  173 
//  174   P0SEL &= ~0x80;                 //ÉèÖÃP07ÎªÆÕÍ¨IO¿Ú
        ANL     0xf3,#0x7f
//  175   P0DIR |= 0x80;                 //P07¶¨ÒåÎªÊä³ö¿Ú
        ORL     0xfd,#0x80
//  176 
//  177   //Ä¬ÈÏ·äÃùÆ÷²»Ïì
//  178   P0_7=1;  
        SETB    0x80.7
//  179 
//  180 #else
//  181   //ÖÕ¶Ë³õÊ¼»¯
//  182 
//  183   //P15ÊÇ¹âÃô´«¸ÐÆ÷µÄDOÒý½Å
//  184 
//  185   P1SEL &= ~0x20;                 //ÉèÖÃP1.5ÎªÆÕÍ¨IO¿Ú
//  186   P1DIR &= ~0x20;                 //P1.5¶¨ÒåÎªÊäÈë¿Ú
//  187 #endif
//  188 
//  189 
//  190   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  191   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  192   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  193 
//  194   // Setup for the flash command's destination address - Group 1
//  195   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  196   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  197   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  198   
//  199   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  200   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  201   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock0
//  202 
//  203   
//  204 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  205 
//  206 /*********************************************************************
//  207  * @fn      SampleApp_ProcessEvent
//  208  *
//  209  * @brief   Generic Application Task event processor.
//  210  *
//  211  * @param   task_id  - The OSAL assigned task ID.
//  212  * @param   events   - Bit map of events to process.
//  213  *
//  214  * @return  Event flags of all unprocessed events.
//  215  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  216 UINT16 SampleApp_ProcessEvent( uint8 task_id, UINT16 events )
SampleApp_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
        CODE
//  217 {
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  218   (void)task_id;  // Intentionally unreferenced parameter
//  219   
//  220   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SampleApp_ProcessEvent_0
//  221   {
//  222     afIncomingMSGPacket_t *MSGpkt;
//  223 
//  224     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID )) )
//  225     {
//  226       switch ( MSGpkt->hdr.event )
//  227       {
//  228       case AF_INCOMING_MSG_CMD:
//  229         SampleApp_ProcessMSGCmd( MSGpkt );
//  230         break;
//  231         
//  232       case ZDO_STATE_CHANGE:
//  233         SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  234         if ( //(SampleApp_NwkState == DEV_ZB_COORD)||
//  235             (SampleApp_NwkState == DEV_ROUTER)
//  236             || (SampleApp_NwkState == DEV_END_DEVICE) )
//  237         {
//  238             
//  239             osal_start_timerEx( SampleApp_TaskID,
//  240                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  241                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
//  242         }
//  243         else
//  244         {
//  245           // Device is no longer in the network
//  246         }
//  247         break;
//  248 
//  249       default:
//  250         break;
//  251       }
//  252 
//  253       osal_msg_deallocate( (uint8 *)MSGpkt );
//  254     }
//  255 
//  256     return ( events ^ SYS_EVENT_MSG );
//  257   }
//  258 
//  259   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_1
//  260   {
//  261     // ²É¼¯º¯Êý
//  262     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  263 
//  264     //ÔÙ´ÎÆô¶¯¶¨Ê±Æ÷
//  265     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  266         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  267 
//  268     // return unprocessed events
//  269     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_2
//  270   }
??SampleApp_ProcessEvent_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SampleApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_3
        SJMP    ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_ProcessMSGCmd
        LCALL   ??SampleApp_ProcessMSGCmd?relay
        SJMP    ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_2:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  271 
//  272 
//  273   return ( 0 );  // Discard unknown events.
??SampleApp_ProcessEvent_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  274 }
//  275 
//  276 /*********************************************************************
//  277  * @fn      SerialApp_ProcessMSGCmd
//  278  *
//  279  * @brief   Data message processor callback. This function processes
//  280  *          any incoming data - probably from other devices. Based
//  281  *          on the cluster ID, perform the intended action.
//  282  *
//  283  * @param   pkt - pointer to the incoming message packet
//  284  *
//  285  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  286  *          FALSE otherwise.
//  287  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  288 void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SampleApp_ProcessMSGCmd:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
        CODE
//  289 {
        FUNCALL SampleApp_ProcessMSGCmd, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  290   uint8 buff1[10]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  291   uint8 buff2[10]={0};
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  292   uint8 Temp_buff1[20]={0};
//  293   uint8 Temp_buff2[20]={0};
//  294   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessMSGCmd_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_ProcessMSGCmd_0:
        JZ      $+5
        LJMP    ??SampleApp_ProcessMSGCmd_1 & 0xFFFF
//  295   {
//  296   case SAMPLEAPP_P2P_CLUSTERID: 
//  297     {
//  298       // ½ÓÊÕÖÕ¶ËÉÏ´«µÄÊý¾Ý
//  299 
//  300       //Ð­µ÷Æ÷´¦Àí     
//  301        buff1[0]=pkt->cmd.Data[0];
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  302        buff1[1]=pkt->cmd.Data[1];
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine4 & 0xFFFF
//  303        buff1[2]=pkt->cmd.Data[2];
??CrossCallReturnLabel_7:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine4 & 0xFFFF
//  304        buff1[3]=pkt->cmd.Data[3];
??CrossCallReturnLabel_8:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine3 & 0xFFFF
//  305        buff1[4]=pkt->cmd.Data[4];
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine3 & 0xFFFF
//  306        buff1[5]=pkt->cmd.Data[5];
??CrossCallReturnLabel_6:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine2 & 0xFFFF
//  307        buff1[6]=pkt->cmd.Data[6];
??CrossCallReturnLabel_0:
        ADD     A,#0x6
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine2 & 0xFFFF
//  308        buff1[7]=pkt->cmd.Data[7];
??CrossCallReturnLabel_1:
        ADD     A,#0x7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine2 & 0xFFFF
//  309        
//  310        buff2[0]=pkt->cmd.Data[8];
??CrossCallReturnLabel_2:
        ADD     A,#0x8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_18:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine2 & 0xFFFF
//  311        buff2[1]=pkt->cmd.Data[9];
??CrossCallReturnLabel_3:
        ADD     A,#0x9
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_19:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine2 & 0xFFFF
//  312        buff2[2]=pkt->cmd.Data[10];
??CrossCallReturnLabel_4:
        ADD     A,#0xa
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  313        buff2[3]=pkt->cmd.Data[11];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R0
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_15:
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  314 
//  315       
//  316         //lcd ÏÔÊ¾
//  317         HalLcdWriteString( buff1, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  318         HalLcdWriteString( buff2, HAL_LCD_LINE_4);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  319 
//  320         //´®¿ÚÊä³ö
//  321         HalUARTWrite(0, buff1, osal_strlen(buff1));  
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  322         HalUARTWrite(0, buff2, osal_strlen(buff2));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  323         HalUARTWrite(0, "\r\n", 2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  324 
//  325     }
//  326     break;
//  327 
//  328   case SAMPLEAPP_PERIODIC_CLUSTERID:
//  329 
//  330     break;
//  331 
//  332     default:
//  333       break;
//  334   }
//  335 }
??SampleApp_ProcessMSGCmd_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_16
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-5
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-5
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond8) CFA_SP SP+-5
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-5
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV     DPL,A
        MOV     A,R2
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond12) CFA_SP SP+-5
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond13) CFA_SP SP+-5
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond14) CFA_SP SP+-5
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond15) CFA_SP SP+-5
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond16) CFA_SP SP+-5
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_9
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond19) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond19) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond19) CFA_SP SP+-5
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_7
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond22) CFA_SP SP+-5
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_7
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_8
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-5
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_5
          CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond26) CFA_SP SP+-5
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_6
          CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond27) CFA_SP SP+-5
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-5
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond33) CFA_SP SP+-5
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond34) CFA_SP SP+-5
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond35) CFA_SP SP+-5
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond36) CFA_SP SP+-5
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        XCH     A,R2
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function SampleApp_ProcessMSGCmd
          CFI Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_7
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_8
          CFI (cfiCond39) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond39) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond39) CFA_SP SP+-5
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_5
          CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond40) CFA_SP SP+-5
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_6
          CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond41) CFA_SP SP+-5
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_0
          CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond42) CFA_SP SP+-5
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_1
          CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond43) CFA_SP SP+-5
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_2
          CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond44) CFA_SP SP+-5
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_3
          CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond45) CFA_SP SP+-5
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function SampleApp_ProcessMSGCmd
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_4
          CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond46) CFA_SP SP+-5
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  336 
//  337 
//  338 /*********************************************************************
//  339  * @fn      SampleApp_CallBack
//  340  *
//  341  * @brief   Send data OTA.
//  342  *
//  343  * @param   port - UART port.
//  344  * @param   event - the UART port event flag.
//  345  *
//  346  * @return  none
//  347  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  348 void SampleApp_CallBack(uint8 port, uint8 event)
SampleApp_CallBack:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function SampleApp_CallBack
        CODE
//  349 {
        FUNCALL SampleApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  350   (void)port;
//  351 
//  352   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  353 #if SAMPLE_APP_LOOPBACK
//  354       (SampleApp_TxLen < SAMPLE_APP_TX_MAX))
//  355 #else
//  356       !SampleApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SampleApp_CallBack_0
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SampleApp_CallBack_0
//  357 #endif
//  358   {
//  359     SampleApp_TxLen += HalUARTRead(SAMPLE_APP_PORT, SampleApp_TxBuf+SampleApp_TxLen+1,
//  360                                                       SAMPLE_APP_TX_MAX-SampleApp_TxLen);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_TxBuf + 1) & 0xff
        MOV     R3,#((SampleApp_TxBuf + 1) >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
//  361   }
//  362 }
??SampleApp_CallBack_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock48
//  363 
//  364 //È¡¹âÕÕÖµ,½ÓÔÚP06ÉÏ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  365 uint16 GetPH()
GetPH:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function GetPH
        CODE
//  366 { 
        FUNCALL GetPH, HalAdcRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  367     
//  368     uint16 adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14); //ADC ²ÉÑùÖµ P06¿Ú
//  369     return adc;
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x6
        LCALL   ??HalAdcRead?relay
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock49
//  370 }
//  371 /*********************************************************************
//  372  * @fn      SampleApp_Send_P2P_Message
//  373  *
//  374  * @brief   point to point.
//  375  *
//  376  * @param   none
//  377  *
//  378  * @return  none
//  379  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  380 void SampleApp_Send_P2P_Message( void )
SampleApp_Send_P2P_Message:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function SampleApp_Send_P2P_Message
        CODE
//  381 {
        FUNCALL SampleApp_Send_P2P_Message, GetPH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, ReadDs18B20
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
//  382   uint8 buff[13]={0};
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0xd
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  383   uint8 PH_buff[5]={0};
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_3` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  384   uint8 Temp_buff[2]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_4` & 0xff
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  385   uint16 temp;        
//  386 //  uint16 PH_temp;
//  387   uint16 PH;
//  388   float PH_V=0.0;
//  389   float PH_Value=0.0;
//  390   float tempFloat;   
//  391   
//  392   PH=GetPH();
        ; Setup parameters for call to function GetPH
        LCALL   ??GetPH?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  393   temp = ReadDs18B20();                //²»´øÐ¡ÊýÎÂ¶ÈÊý¾Ý
        ; Setup parameters for call to function ReadDs18B20
        LCALL   ??ReadDs18B20?relay
        MOV     A,R1
        MOV     R6,A
//  394   
//  395   PH_V=(float)((float)(PH*3.3))/4095.0;
//  396   PH_Value=-5.7541*PH_V+16.654;
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_457ff000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_c0b82196
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_41853b64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  397   
//  398   if(PH_Value<=0){PH_Value=0;}
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleApp_Send_P2P_Message_0
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??SampleApp_Send_P2P_Message_1
//  399   if(PH_Value>14){PH_Value=14;}
??SampleApp_Send_P2P_Message_0:
        MOV     DPTR,#__Constant_41600001
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??SampleApp_Send_P2P_Message_1
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x60
        MOV     ?V0 + 3,#0x41
//  400   
//  401 //  PH_temp=PH_Value*100;
//  402   buff[0]='P';
??SampleApp_Send_P2P_Message_1:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x50
        MOVX    @DPTR,A
//  403   buff[1]='H';
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x48
        MOVX    @DPTR,A
//  404   buff[2]=':';
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  405   buff[3]=(int)(PH_Value*100)/1000+'0';
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 0,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  406   buff[4]=(int)(PH_Value*100)%1000/100+'0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  407   buff[5]='.';
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  408   buff[6]=(int)(PH_Value*100)%100/10+'0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 2,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  409   buff[7]=(int)(PH_Value*100)%10+'0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     R0,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  410   
//  411   PH_buff[0]=buff[3];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  412   PH_buff[1]=buff[4];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  413   PH_buff[2]=buff[5];
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  414   PH_buff[3]=buff[6];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  415   PH_buff[4]=buff[7];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  416 
//  417   buff[8] ='T';
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x54
        MOVX    @DPTR,A
//  418   buff[9] =':';
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  419   buff[10] = temp/10+'0';//È¡³öÎÂ¶ÈµÄÕûÊý
        MOV     B,#0xa
        MOV     A,R6
        DIV     AB
        ADD     A,#0x30
        MOV     R0,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  420   buff[11] = temp%10+'0';
        MOV     A,R6
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     R1,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  421   
//  422   Temp_buff[0]=buff[10];
        MOV     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  423   Temp_buff[1]=buff[11];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  424   
//  425     //lcd ÏÔÊ¾    
//  426              HalLcdWriteString( PH_buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  427              HalLcdWriteString( Temp_buff, HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  428 
//  429     //´®¿ÚÊä³ö
//  430     HalUARTWrite(0, PH_buff, osal_strlen(PH_buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  431     HalUARTWrite(0, "\r\n", 2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  432     HalUARTWrite(0, Temp_buff, osal_strlen(Temp_buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  433     HalUARTWrite(0, "\r\n", 2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  434   
//  435   //ÎÞÏß·¢ËÍµ½Ð­µ÷Æ÷
//  436   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  437                        SAMPLEAPP_P2P_CLUSTERID,
//  438                        12,
//  439                        buff,
//  440                        &SampleApp_MsgID,
//  441                        AF_DISCV_ROUTE,
//  442                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,#0xc
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
//  443   {
//  444   }
//  445   else
//  446   {
//  447     // Error occurred in request to send.
//  448   }
//  449 }
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleApp_epDesc>`:
        DATA8
        DB 11
        DATA16
        DW SampleApp_TaskID
        DW SampleApp_SimpleDesc
        DATA8
        DB 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessMSGCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_CallBack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetPH?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetPH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_Send_P2P_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_3`:
        DB 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0}>_4`:
        DATA8
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_457ff000:
        DD 457FF000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c0b82196:
        DD 0C0B82196H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41853b64:
        DD 41853B64H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41600001:
        DD 41600001H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        END
//  450 
//  451 
// 
// 1 443 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//     6 bytes in segment XDATA_I
//     6 bytes in segment XDATA_ID
//    87 bytes in segment XDATA_ROM_C
//   122 bytes in segment XDATA_Z
// 
// 1 485 bytes of CODE  memory
//    59 bytes of CONST memory (+ 28 bytes shared)
//     0 bytes of DATA  memory (+  3 bytes shared)
//   128 bytes of XDATA memory
//
//Errors: none
//Warnings: 18
